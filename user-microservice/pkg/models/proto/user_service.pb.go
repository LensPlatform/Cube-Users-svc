// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/user_service.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetUsersSearchRequest struct {
	QueryMessage         string      `protobuf:"bytes,1,opt,name=QueryMessage,proto3" json:"QueryMessage,omitempty"`
	MaxResults           int32       `protobuf:"varint,2,opt,name=MaxResults,proto3" json:"MaxResults,omitempty"`
	UserType             AccountType `protobuf:"varint,3,opt,name=userType,proto3,enum=AccountType" json:"userType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetUsersSearchRequest) Reset()         { *m = GetUsersSearchRequest{} }
func (m *GetUsersSearchRequest) String() string { return proto.CompactTextString(m) }
func (*GetUsersSearchRequest) ProtoMessage()    {}
func (*GetUsersSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{0}
}

func (m *GetUsersSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUsersSearchRequest.Unmarshal(m, b)
}
func (m *GetUsersSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUsersSearchRequest.Marshal(b, m, deterministic)
}
func (m *GetUsersSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersSearchRequest.Merge(m, src)
}
func (m *GetUsersSearchRequest) XXX_Size() int {
	return xxx_messageInfo_GetUsersSearchRequest.Size(m)
}
func (m *GetUsersSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersSearchRequest proto.InternalMessageInfo

func (m *GetUsersSearchRequest) GetQueryMessage() string {
	if m != nil {
		return m.QueryMessage
	}
	return ""
}

func (m *GetUsersSearchRequest) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

func (m *GetUsersSearchRequest) GetUserType() AccountType {
	if m != nil {
		return m.UserType
	}
	return AccountType_RegularUser
}

type Uint32UserTypeRequest struct {
	ID                   uint32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserType             AccountType `protobuf:"varint,2,opt,name=userType,proto3,enum=AccountType" json:"userType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Uint32UserTypeRequest) Reset()         { *m = Uint32UserTypeRequest{} }
func (m *Uint32UserTypeRequest) String() string { return proto.CompactTextString(m) }
func (*Uint32UserTypeRequest) ProtoMessage()    {}
func (*Uint32UserTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{1}
}

func (m *Uint32UserTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uint32UserTypeRequest.Unmarshal(m, b)
}
func (m *Uint32UserTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uint32UserTypeRequest.Marshal(b, m, deterministic)
}
func (m *Uint32UserTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint32UserTypeRequest.Merge(m, src)
}
func (m *Uint32UserTypeRequest) XXX_Size() int {
	return xxx_messageInfo_Uint32UserTypeRequest.Size(m)
}
func (m *Uint32UserTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint32UserTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Uint32UserTypeRequest proto.InternalMessageInfo

func (m *Uint32UserTypeRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Uint32UserTypeRequest) GetUserType() AccountType {
	if m != nil {
		return m.UserType
	}
	return AccountType_RegularUser
}

type Uint32TeamTypeRequest struct {
	ID                   uint32          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserType             TeamAccountType `protobuf:"varint,2,opt,name=userType,proto3,enum=TeamAccountType" json:"userType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Uint32TeamTypeRequest) Reset()         { *m = Uint32TeamTypeRequest{} }
func (m *Uint32TeamTypeRequest) String() string { return proto.CompactTextString(m) }
func (*Uint32TeamTypeRequest) ProtoMessage()    {}
func (*Uint32TeamTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{2}
}

func (m *Uint32TeamTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uint32TeamTypeRequest.Unmarshal(m, b)
}
func (m *Uint32TeamTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uint32TeamTypeRequest.Marshal(b, m, deterministic)
}
func (m *Uint32TeamTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint32TeamTypeRequest.Merge(m, src)
}
func (m *Uint32TeamTypeRequest) XXX_Size() int {
	return xxx_messageInfo_Uint32TeamTypeRequest.Size(m)
}
func (m *Uint32TeamTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint32TeamTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Uint32TeamTypeRequest proto.InternalMessageInfo

func (m *Uint32TeamTypeRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Uint32TeamTypeRequest) GetUserType() TeamAccountType {
	if m != nil {
		return m.UserType
	}
	return TeamAccountType_StartupTeam
}

type Uint32GroupTypeRequest struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint32GroupTypeRequest) Reset()         { *m = Uint32GroupTypeRequest{} }
func (m *Uint32GroupTypeRequest) String() string { return proto.CompactTextString(m) }
func (*Uint32GroupTypeRequest) ProtoMessage()    {}
func (*Uint32GroupTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{3}
}

func (m *Uint32GroupTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uint32GroupTypeRequest.Unmarshal(m, b)
}
func (m *Uint32GroupTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uint32GroupTypeRequest.Marshal(b, m, deterministic)
}
func (m *Uint32GroupTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint32GroupTypeRequest.Merge(m, src)
}
func (m *Uint32GroupTypeRequest) XXX_Size() int {
	return xxx_messageInfo_Uint32GroupTypeRequest.Size(m)
}
func (m *Uint32GroupTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint32GroupTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Uint32GroupTypeRequest proto.InternalMessageInfo

func (m *Uint32GroupTypeRequest) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type StringUserTypeRequest struct {
	QueryMessage         string      `protobuf:"bytes,1,opt,name=QueryMessage,proto3" json:"QueryMessage,omitempty"`
	UserType             AccountType `protobuf:"varint,3,opt,name=userType,proto3,enum=AccountType" json:"userType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StringUserTypeRequest) Reset()         { *m = StringUserTypeRequest{} }
func (m *StringUserTypeRequest) String() string { return proto.CompactTextString(m) }
func (*StringUserTypeRequest) ProtoMessage()    {}
func (*StringUserTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{4}
}

func (m *StringUserTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringUserTypeRequest.Unmarshal(m, b)
}
func (m *StringUserTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringUserTypeRequest.Marshal(b, m, deterministic)
}
func (m *StringUserTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringUserTypeRequest.Merge(m, src)
}
func (m *StringUserTypeRequest) XXX_Size() int {
	return xxx_messageInfo_StringUserTypeRequest.Size(m)
}
func (m *StringUserTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StringUserTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StringUserTypeRequest proto.InternalMessageInfo

func (m *StringUserTypeRequest) GetQueryMessage() string {
	if m != nil {
		return m.QueryMessage
	}
	return ""
}

func (m *StringUserTypeRequest) GetUserType() AccountType {
	if m != nil {
		return m.UserType
	}
	return AccountType_RegularUser
}

type StringTeamTypeRequest struct {
	QueryMessage         string          `protobuf:"bytes,1,opt,name=QueryMessage,proto3" json:"QueryMessage,omitempty"`
	UserType             TeamAccountType `protobuf:"varint,3,opt,name=userType,proto3,enum=TeamAccountType" json:"userType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StringTeamTypeRequest) Reset()         { *m = StringTeamTypeRequest{} }
func (m *StringTeamTypeRequest) String() string { return proto.CompactTextString(m) }
func (*StringTeamTypeRequest) ProtoMessage()    {}
func (*StringTeamTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{5}
}

func (m *StringTeamTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringTeamTypeRequest.Unmarshal(m, b)
}
func (m *StringTeamTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringTeamTypeRequest.Marshal(b, m, deterministic)
}
func (m *StringTeamTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringTeamTypeRequest.Merge(m, src)
}
func (m *StringTeamTypeRequest) XXX_Size() int {
	return xxx_messageInfo_StringTeamTypeRequest.Size(m)
}
func (m *StringTeamTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StringTeamTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StringTeamTypeRequest proto.InternalMessageInfo

func (m *StringTeamTypeRequest) GetQueryMessage() string {
	if m != nil {
		return m.QueryMessage
	}
	return ""
}

func (m *StringTeamTypeRequest) GetUserType() TeamAccountType {
	if m != nil {
		return m.UserType
	}
	return TeamAccountType_StartupTeam
}

type StringGroupTypeRequest struct {
	QueryMessage         string   `protobuf:"bytes,1,opt,name=QueryMessage,proto3" json:"QueryMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringGroupTypeRequest) Reset()         { *m = StringGroupTypeRequest{} }
func (m *StringGroupTypeRequest) String() string { return proto.CompactTextString(m) }
func (*StringGroupTypeRequest) ProtoMessage()    {}
func (*StringGroupTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{6}
}

func (m *StringGroupTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringGroupTypeRequest.Unmarshal(m, b)
}
func (m *StringGroupTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringGroupTypeRequest.Marshal(b, m, deterministic)
}
func (m *StringGroupTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringGroupTypeRequest.Merge(m, src)
}
func (m *StringGroupTypeRequest) XXX_Size() int {
	return xxx_messageInfo_StringGroupTypeRequest.Size(m)
}
func (m *StringGroupTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StringGroupTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StringGroupTypeRequest proto.InternalMessageInfo

func (m *StringGroupTypeRequest) GetQueryMessage() string {
	if m != nil {
		return m.QueryMessage
	}
	return ""
}

type UserResponse struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=Users,proto3" json:"Users,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{7}
}

func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (m *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(m, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

func (m *UserResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UserRequest struct {
	User                 *User       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	UserType             AccountType `protobuf:"varint,2,opt,name=userType,proto3,enum=AccountType" json:"userType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{8}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserRequest) GetUserType() AccountType {
	if m != nil {
		return m.UserType
	}
	return AccountType_RegularUser
}

type TeamResponse struct {
	Teams                []*Team  `protobuf:"bytes,1,rep,name=Teams,proto3" json:"Teams,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamResponse) Reset()         { *m = TeamResponse{} }
func (m *TeamResponse) String() string { return proto.CompactTextString(m) }
func (*TeamResponse) ProtoMessage()    {}
func (*TeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{9}
}

func (m *TeamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamResponse.Unmarshal(m, b)
}
func (m *TeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamResponse.Marshal(b, m, deterministic)
}
func (m *TeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamResponse.Merge(m, src)
}
func (m *TeamResponse) XXX_Size() int {
	return xxx_messageInfo_TeamResponse.Size(m)
}
func (m *TeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeamResponse proto.InternalMessageInfo

func (m *TeamResponse) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *TeamResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type TeamRequest struct {
	Team                 *Team           `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	TeamType             TeamAccountType `protobuf:"varint,2,opt,name=teamType,proto3,enum=TeamAccountType" json:"teamType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TeamRequest) Reset()         { *m = TeamRequest{} }
func (m *TeamRequest) String() string { return proto.CompactTextString(m) }
func (*TeamRequest) ProtoMessage()    {}
func (*TeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{10}
}

func (m *TeamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamRequest.Unmarshal(m, b)
}
func (m *TeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamRequest.Marshal(b, m, deterministic)
}
func (m *TeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamRequest.Merge(m, src)
}
func (m *TeamRequest) XXX_Size() int {
	return xxx_messageInfo_TeamRequest.Size(m)
}
func (m *TeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamRequest proto.InternalMessageInfo

func (m *TeamRequest) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *TeamRequest) GetTeamType() TeamAccountType {
	if m != nil {
		return m.TeamType
	}
	return TeamAccountType_StartupTeam
}

type GroupResponse struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=Groups,proto3" json:"Groups,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupResponse) Reset()         { *m = GroupResponse{} }
func (m *GroupResponse) String() string { return proto.CompactTextString(m) }
func (*GroupResponse) ProtoMessage()    {}
func (*GroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{11}
}

func (m *GroupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupResponse.Unmarshal(m, b)
}
func (m *GroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupResponse.Marshal(b, m, deterministic)
}
func (m *GroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupResponse.Merge(m, src)
}
func (m *GroupResponse) XXX_Size() int {
	return xxx_messageInfo_GroupResponse.Size(m)
}
func (m *GroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroupResponse proto.InternalMessageInfo

func (m *GroupResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GroupResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GroupRequest struct {
	Group                *Group   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupRequest) Reset()         { *m = GroupRequest{} }
func (m *GroupRequest) String() string { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()    {}
func (*GroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{12}
}

func (m *GroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupRequest.Unmarshal(m, b)
}
func (m *GroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupRequest.Marshal(b, m, deterministic)
}
func (m *GroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRequest.Merge(m, src)
}
func (m *GroupRequest) XXX_Size() int {
	return xxx_messageInfo_GroupRequest.Size(m)
}
func (m *GroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRequest proto.InternalMessageInfo

func (m *GroupRequest) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type UpdateOrCreateEntityResponse struct {
	Successful           bool     `protobuf:"varint,1,opt,name=Successful,proto3" json:"Successful,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateOrCreateEntityResponse) Reset()         { *m = UpdateOrCreateEntityResponse{} }
func (m *UpdateOrCreateEntityResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateOrCreateEntityResponse) ProtoMessage()    {}
func (*UpdateOrCreateEntityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6d6fe680f72820c, []int{13}
}

func (m *UpdateOrCreateEntityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateOrCreateEntityResponse.Unmarshal(m, b)
}
func (m *UpdateOrCreateEntityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateOrCreateEntityResponse.Marshal(b, m, deterministic)
}
func (m *UpdateOrCreateEntityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrCreateEntityResponse.Merge(m, src)
}
func (m *UpdateOrCreateEntityResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateOrCreateEntityResponse.Size(m)
}
func (m *UpdateOrCreateEntityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrCreateEntityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrCreateEntityResponse proto.InternalMessageInfo

func (m *UpdateOrCreateEntityResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *UpdateOrCreateEntityResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*GetUsersSearchRequest)(nil), "GetUsersSearchRequest")
	proto.RegisterType((*Uint32UserTypeRequest)(nil), "Uint32UserTypeRequest")
	proto.RegisterType((*Uint32TeamTypeRequest)(nil), "Uint32TeamTypeRequest")
	proto.RegisterType((*Uint32GroupTypeRequest)(nil), "Uint32GroupTypeRequest")
	proto.RegisterType((*StringUserTypeRequest)(nil), "StringUserTypeRequest")
	proto.RegisterType((*StringTeamTypeRequest)(nil), "StringTeamTypeRequest")
	proto.RegisterType((*StringGroupTypeRequest)(nil), "StringGroupTypeRequest")
	proto.RegisterType((*UserResponse)(nil), "UserResponse")
	proto.RegisterType((*UserRequest)(nil), "UserRequest")
	proto.RegisterType((*TeamResponse)(nil), "TeamResponse")
	proto.RegisterType((*TeamRequest)(nil), "TeamRequest")
	proto.RegisterType((*GroupResponse)(nil), "GroupResponse")
	proto.RegisterType((*GroupRequest)(nil), "GroupRequest")
	proto.RegisterType((*UpdateOrCreateEntityResponse)(nil), "UpdateOrCreateEntityResponse")
}

func init() {
	proto.RegisterFile("proto/user_service.proto", fileDescriptor_d6d6fe680f72820c)
}

var fileDescriptor_d6d6fe680f72820c = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0xf2, 0x46,
	0x10, 0x15, 0x7c, 0x85, 0x26, 0x83, 0xa1, 0x8d, 0xd5, 0x10, 0x42, 0xd3, 0x08, 0xf9, 0x8a, 0x8b,
	0x64, 0x91, 0x48, 0xd5, 0x28, 0xa1, 0x37, 0xa1, 0x44, 0x11, 0x95, 0xd2, 0x36, 0x26, 0xf4, 0xa2,
	0x37, 0x95, 0x31, 0x13, 0x62, 0xc9, 0xf6, 0xd2, 0xdd, 0x75, 0x15, 0x1e, 0xa0, 0x6f, 0xd2, 0x97,
	0x68, 0x9f, 0xee, 0x93, 0x77, 0x6d, 0xc7, 0x06, 0xf3, 0x13, 0x6e, 0x90, 0xf6, 0x8c, 0xcf, 0x99,
	0x33, 0xb3, 0xe3, 0x31, 0xd0, 0x98, 0x33, 0x2a, 0x68, 0x27, 0xe0, 0xc8, 0xfe, 0xe4, 0xc8, 0xfe,
	0x76, 0x6c, 0x24, 0x12, 0x6a, 0xde, 0xce, 0x1c, 0xf1, 0x1a, 0x4c, 0x88, 0x4d, 0xbd, 0x8e, 0xe3,
	0xbf, 0xd0, 0x89, 0x4b, 0xdf, 0xe8, 0x1c, 0xfd, 0x8e, 0x0c, 0xdb, 0x97, 0x33, 0xf4, 0x2f, 0x67,
	0x94, 0x79, 0x1d, 0x3a, 0x17, 0x0e, 0xf5, 0x79, 0x27, 0x3c, 0x44, 0x5c, 0x5d, 0xa9, 0xda, 0xd4,
	0xf3, 0xa8, 0x9f, 0xc5, 0x84, 0x35, 0x71, 0x91, 0x2b, 0xcc, 0xf8, 0xa7, 0x00, 0xc7, 0x0f, 0x28,
	0xc6, 0x1c, 0x19, 0x1f, 0xa1, 0xc5, 0xec, 0x57, 0x13, 0xff, 0x0a, 0x90, 0x0b, 0xdd, 0x00, 0xed,
	0x29, 0x40, 0xb6, 0x78, 0x44, 0xce, 0xad, 0x19, 0x36, 0x0a, 0xad, 0x42, 0xfb, 0xd0, 0xcc, 0x60,
	0xfa, 0x39, 0xc0, 0xa3, 0xf5, 0x66, 0x22, 0x0f, 0x5c, 0xc1, 0x1b, 0xc5, 0x56, 0xa1, 0x5d, 0x32,
	0x53, 0x88, 0xde, 0x86, 0x83, 0xb0, 0xae, 0xe7, 0xc5, 0x1c, 0x1b, 0x9f, 0x5a, 0x85, 0x76, 0xad,
	0xab, 0x91, 0x3b, 0xdb, 0xa6, 0x81, 0x2f, 0x42, 0xcc, 0x4c, 0xa2, 0xc6, 0x13, 0x1c, 0x8f, 0x1d,
	0x5f, 0x5c, 0x75, 0xc7, 0x11, 0x12, 0xdb, 0xa8, 0x41, 0x71, 0x38, 0x90, 0xc9, 0xab, 0x66, 0x71,
	0x38, 0xc8, 0x48, 0x16, 0x37, 0x4a, 0x8e, 0x63, 0xc9, 0x67, 0xb4, 0xbc, 0x4d, 0x92, 0x17, 0x2b,
	0x92, 0x5f, 0x93, 0x90, 0x93, 0x2f, 0xdb, 0x86, 0xba, 0x92, 0x7d, 0x60, 0x34, 0x98, 0x6f, 0xd0,
	0x35, 0x10, 0x8e, 0x47, 0x82, 0x39, 0xfe, 0x6c, 0xb9, 0xa6, 0x5d, 0x5a, 0xbb, 0x7b, 0xeb, 0x9c,
	0x38, 0xcd, 0x72, 0x9d, 0xbb, 0xa4, 0xb9, 0x58, 0x49, 0xb3, 0xa9, 0xf6, 0x1f, 0xa1, 0xae, 0x52,
	0xad, 0xd4, 0xbe, 0x43, 0x2e, 0xe3, 0x0e, 0xb4, 0xb0, 0x13, 0x26, 0xf2, 0x39, 0xf5, 0x39, 0xea,
	0xdf, 0x42, 0x49, 0xce, 0x5d, 0xa3, 0xd0, 0xfa, 0xd4, 0xae, 0x74, 0x4b, 0x44, 0x46, 0x15, 0xa6,
	0x7f, 0x03, 0x25, 0x64, 0x8c, 0x32, 0x79, 0x23, 0x87, 0xa6, 0x3a, 0x18, 0x26, 0x54, 0x94, 0x84,
	0xca, 0x7a, 0x0a, 0x5f, 0x84, 0xde, 0x64, 0xb6, 0x44, 0x40, 0x42, 0x1f, 0x98, 0x93, 0x3b, 0xd0,
	0xc2, 0x8a, 0xd3, 0xb6, 0xc2, 0xf3, 0xbb, 0x2d, 0x19, 0x55, 0xd8, 0x1a, 0x5b, 0xbf, 0x43, 0x45,
	0x49, 0x24, 0xb6, 0x04, 0x5a, 0x5e, 0x62, 0x4b, 0xc6, 0x24, 0x14, 0xf6, 0x5b, 0x44, 0xd7, 0xb4,
	0x7e, 0xd6, 0xe2, 0x27, 0x8c, 0x7b, 0xa8, 0xca, 0x4e, 0x27, 0xde, 0xce, 0xa1, 0x2c, 0x81, 0xd8,
	0x5c, 0x99, 0xa8, 0x78, 0x84, 0xae, 0xb1, 0x77, 0x01, 0x5a, 0x24, 0xa3, 0xfc, 0x9d, 0x41, 0x69,
	0x16, 0x9e, 0x23, 0x83, 0xb1, 0x88, 0x02, 0x8d, 0x67, 0x38, 0x1b, 0xcf, 0xa7, 0x96, 0xc0, 0x5f,
	0xd9, 0x4f, 0x0c, 0x2d, 0x81, 0xf7, 0xbe, 0x70, 0xc4, 0x22, 0xe5, 0x01, 0x46, 0x81, 0x6d, 0x23,
	0xe7, 0x2f, 0x81, 0x2b, 0x25, 0x0e, 0xcc, 0x14, 0x92, 0xef, 0xa1, 0xfb, 0x2f, 0xa8, 0xdb, 0xe7,
	0x23, 0xb5, 0xe3, 0xf4, 0xef, 0xa1, 0x12, 0x2d, 0x9e, 0xfe, 0x62, 0x38, 0xd0, 0xeb, 0x24, 0xf7,
	0xfd, 0x6f, 0x56, 0x49, 0x66, 0x66, 0x6e, 0xe1, 0x28, 0x61, 0x85, 0xbf, 0xbe, 0xe5, 0xa1, 0x5e,
	0x27, 0xb9, 0xef, 0xd9, 0x32, 0xf7, 0x1a, 0x6a, 0x09, 0xf7, 0xde, 0xb3, 0x1c, 0xf7, 0xe3, 0x44,
	0xde, 0x5f, 0x84, 0xcf, 0xe9, 0x75, 0x92, 0xbb, 0x34, 0x97, 0x89, 0x37, 0x00, 0xaa, 0x85, 0x21,
	0xaa, 0x6b, 0x24, 0x35, 0xbb, 0xcd, 0xef, 0xc8, 0xc6, 0x2e, 0xdf, 0x00, 0xa8, 0xf8, 0x5e, 0xd4,
	0x01, 0xba, 0xb8, 0x0f, 0xf5, 0x67, 0x38, 0x52, 0xd4, 0xdf, 0x18, 0x7d, 0x71, 0x5c, 0xec, 0x2f,
	0x86, 0xd3, 0xb5, 0x57, 0xb3, 0xdd, 0x86, 0xc2, 0xc3, 0xf9, 0xd6, 0x35, 0x92, 0x7a, 0x43, 0x76,
	0x2e, 0x7e, 0x2f, 0xaa, 0xaa, 0xe0, 0xe3, 0x54, 0x35, 0x91, 0x21, 0x21, 0x33, 0x91, 0x4b, 0x6b,
	0xb5, 0x59, 0x25, 0x99, 0x75, 0xf1, 0x03, 0x54, 0x13, 0xd6, 0x2f, 0xe9, 0x69, 0xdc, 0xc2, 0x53,
	0x43, 0xa5, 0x78, 0xd9, 0x69, 0xdc, 0x42, 0xec, 0x24, 0xc4, 0xf7, 0x69, 0xcc, 0x27, 0xaa, 0xcd,
	0xa3, 0xf7, 0x40, 0x7f, 0x27, 0x0c, 0xfd, 0x69, 0xc0, 0x05, 0x5b, 0xec, 0x9a, 0xad, 0x07, 0x15,
	0xd5, 0x2c, 0xb9, 0x23, 0xf4, 0x2a, 0x49, 0x6f, 0x92, 0x6d, 0x1d, 0xbd, 0x06, 0xed, 0x01, 0x85,
	0x64, 0xc8, 0x96, 0x9e, 0x90, 0xfc, 0x4f, 0x67, 0xb3, 0x46, 0xb2, 0x7b, 0xee, 0x46, 0xd6, 0x18,
	0x11, 0x65, 0x57, 0x4f, 0x48, 0xfe, 0x97, 0x67, 0x85, 0x7a, 0x0b, 0x5f, 0xc5, 0xd4, 0xb8, 0x3f,
	0x3b, 0x73, 0x7b, 0x50, 0x51, 0xf5, 0xec, 0x53, 0x6c, 0x0f, 0x2a, 0x6a, 0xf2, 0xf6, 0x20, 0x37,
	0xcb, 0xff, 0xff, 0x77, 0x5a, 0x3c, 0x28, 0xf4, 0xbf, 0xfc, 0xa3, 0xe4, 0xd1, 0x29, 0xba, 0x93,
	0xb2, 0xfc, 0x7f, 0x76, 0xf5, 0x39, 0x00, 0x00, 0xff, 0xff, 0x08, 0x78, 0x55, 0x6e, 0x1f, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersServiceClient interface {
	// Define Get, Update, Create, Delete requests for all user types
	GetUserByID(ctx context.Context, in *Uint32UserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserByUsername(ctx context.Context, in *StringUserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserByEmail(ctx context.Context, in *StringUserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUsersByType(ctx context.Context, in *GetUsersSearchRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	DeleteProfileById(ctx context.Context, in *Uint32UserTypeRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	// Define Get, Update, Create, Delete requests for all team types
	CreateTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	UpdateTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	DeleteTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	GetTeamByID(ctx context.Context, in *Uint32TeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	GetTeamByName(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	GetTeamByEmail(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	GetTeamsByType(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*Team, error)
	GetTeamsByIndustry(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	// Define Get, Update, Create, Delete requests for all group types
	CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	GetGroupByID(ctx context.Context, in *Uint32GroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	GetGroupByName(ctx context.Context, in *StringGroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	GetGroupsByType(ctx context.Context, in *StringGroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
	DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetUserByID(ctx context.Context, in *Uint32UserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByUsername(ctx context.Context, in *StringUserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserByEmail(ctx context.Context, in *StringUserTypeRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUsersByType(ctx context.Context, in *GetUsersSearchRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetUsersByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteProfileById(ctx context.Context, in *Uint32UserTypeRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteProfileById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamByID(ctx context.Context, in *Uint32TeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamByName(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamByEmail(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamsByType(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamsByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetTeamsByIndustry(ctx context.Context, in *StringTeamTypeRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetTeamsByIndustry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetGroupByID(ctx context.Context, in *Uint32GroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetGroupByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetGroupByName(ctx context.Context, in *StringGroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetGroupByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetGroupsByType(ctx context.Context, in *StringGroupTypeRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetGroupsByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*UpdateOrCreateEntityResponse, error) {
	out := new(UpdateOrCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
type UsersServiceServer interface {
	// Define Get, Update, Create, Delete requests for all user types
	GetUserByID(context.Context, *Uint32UserTypeRequest) (*UserResponse, error)
	GetUserByUsername(context.Context, *StringUserTypeRequest) (*UserResponse, error)
	GetUserByEmail(context.Context, *StringUserTypeRequest) (*UserResponse, error)
	GetUsersByType(context.Context, *GetUsersSearchRequest) (*UserResponse, error)
	CreateUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error)
	UpdateUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error)
	DeleteUser(context.Context, *UserRequest) (*UpdateOrCreateEntityResponse, error)
	DeleteProfileById(context.Context, *Uint32UserTypeRequest) (*UpdateOrCreateEntityResponse, error)
	// Define Get, Update, Create, Delete requests for all team types
	CreateTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error)
	UpdateTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error)
	DeleteTeam(context.Context, *TeamRequest) (*UpdateOrCreateEntityResponse, error)
	GetTeamByID(context.Context, *Uint32TeamTypeRequest) (*TeamResponse, error)
	GetTeamByName(context.Context, *StringTeamTypeRequest) (*TeamResponse, error)
	GetTeamByEmail(context.Context, *StringTeamTypeRequest) (*TeamResponse, error)
	GetTeamsByType(context.Context, *StringTeamTypeRequest) (*Team, error)
	GetTeamsByIndustry(context.Context, *StringTeamTypeRequest) (*TeamResponse, error)
	// Define Get, Update, Create, Delete requests for all group types
	CreateGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error)
	GetGroupByID(context.Context, *Uint32GroupTypeRequest) (*GroupResponse, error)
	GetGroupByName(context.Context, *StringGroupTypeRequest) (*GroupResponse, error)
	GetGroupsByType(context.Context, *StringGroupTypeRequest) (*GroupResponse, error)
	UpdateGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error)
	DeleteGroup(context.Context, *GroupRequest) (*UpdateOrCreateEntityResponse, error)
}

// UnimplementedUsersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (*UnimplementedUsersServiceServer) GetUserByID(ctx context.Context, req *Uint32UserTypeRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (*UnimplementedUsersServiceServer) GetUserByUsername(ctx context.Context, req *StringUserTypeRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (*UnimplementedUsersServiceServer) GetUserByEmail(ctx context.Context, req *StringUserTypeRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (*UnimplementedUsersServiceServer) GetUsersByType(ctx context.Context, req *GetUsersSearchRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByType not implemented")
}
func (*UnimplementedUsersServiceServer) CreateUser(ctx context.Context, req *UserRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUsersServiceServer) UpdateUser(ctx context.Context, req *UserRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUsersServiceServer) DeleteUser(ctx context.Context, req *UserRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedUsersServiceServer) DeleteProfileById(ctx context.Context, req *Uint32UserTypeRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfileById not implemented")
}
func (*UnimplementedUsersServiceServer) CreateTeam(ctx context.Context, req *TeamRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedUsersServiceServer) UpdateTeam(ctx context.Context, req *TeamRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedUsersServiceServer) DeleteTeam(ctx context.Context, req *TeamRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamByID(ctx context.Context, req *Uint32TeamTypeRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByID not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamByName(ctx context.Context, req *StringTeamTypeRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByName not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamByEmail(ctx context.Context, req *StringTeamTypeRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByEmail not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamsByType(ctx context.Context, req *StringTeamTypeRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsByType not implemented")
}
func (*UnimplementedUsersServiceServer) GetTeamsByIndustry(ctx context.Context, req *StringTeamTypeRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsByIndustry not implemented")
}
func (*UnimplementedUsersServiceServer) CreateGroup(ctx context.Context, req *GroupRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedUsersServiceServer) GetGroupByID(ctx context.Context, req *Uint32GroupTypeRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByID not implemented")
}
func (*UnimplementedUsersServiceServer) GetGroupByName(ctx context.Context, req *StringGroupTypeRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByName not implemented")
}
func (*UnimplementedUsersServiceServer) GetGroupsByType(ctx context.Context, req *StringGroupTypeRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsByType not implemented")
}
func (*UnimplementedUsersServiceServer) UpdateGroup(ctx context.Context, req *GroupRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedUsersServiceServer) DeleteGroup(ctx context.Context, req *GroupRequest) (*UpdateOrCreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}

func RegisterUsersServiceServer(s *grpc.Server, srv UsersServiceServer) {
	s.RegisterService(&_UsersService_serviceDesc, srv)
}

func _UsersService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32UserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByID(ctx, req.(*Uint32UserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringUserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByUsername(ctx, req.(*StringUserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringUserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByEmail(ctx, req.(*StringUserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUsersByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUsersByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUsersByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUsersByType(ctx, req.(*GetUsersSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteProfileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32UserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteProfileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteProfileById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteProfileById(ctx, req.(*Uint32UserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32TeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamByID(ctx, req.(*Uint32TeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamByName(ctx, req.(*StringTeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamByEmail(ctx, req.(*StringTeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamsByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamsByType(ctx, req.(*StringTeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetTeamsByIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringTeamTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetTeamsByIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetTeamsByIndustry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetTeamsByIndustry(ctx, req.(*StringTeamTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32GroupTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetGroupByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetGroupByID(ctx, req.(*Uint32GroupTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetGroupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringGroupTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetGroupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetGroupByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetGroupByName(ctx, req.(*StringGroupTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetGroupsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringGroupTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetGroupsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetGroupsByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetGroupsByType(ctx, req.(*StringGroupTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByID",
			Handler:    _UsersService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByUsername",
			Handler:    _UsersService_GetUserByUsername_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _UsersService_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUsersByType",
			Handler:    _UsersService_GetUsersByType_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UsersService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersService_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteProfileById",
			Handler:    _UsersService_DeleteProfileById_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _UsersService_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _UsersService_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _UsersService_DeleteTeam_Handler,
		},
		{
			MethodName: "GetTeamByID",
			Handler:    _UsersService_GetTeamByID_Handler,
		},
		{
			MethodName: "GetTeamByName",
			Handler:    _UsersService_GetTeamByName_Handler,
		},
		{
			MethodName: "GetTeamByEmail",
			Handler:    _UsersService_GetTeamByEmail_Handler,
		},
		{
			MethodName: "GetTeamsByType",
			Handler:    _UsersService_GetTeamsByType_Handler,
		},
		{
			MethodName: "GetTeamsByIndustry",
			Handler:    _UsersService_GetTeamsByIndustry_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _UsersService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroupByID",
			Handler:    _UsersService_GetGroupByID_Handler,
		},
		{
			MethodName: "GetGroupByName",
			Handler:    _UsersService_GetGroupByName_Handler,
		},
		{
			MethodName: "GetGroupsByType",
			Handler:    _UsersService_GetGroupsByType_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _UsersService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _UsersService_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_service.proto",
}

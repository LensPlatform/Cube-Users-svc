// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	service "github.com/LensPlatform/micro/user-microservice/pkg/service"
	endpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateUserEndpoint                   endpoint.Endpoint
	CreateProfileEndpoint                endpoint.Endpoint
	CreateSubscriptionEndpoint           endpoint.Endpoint
	CreateSubscriptionsEndpoint          endpoint.Endpoint
	UpdateUserEndpoint                   endpoint.Endpoint
	UpdateUserProfileEndpoint            endpoint.Endpoint
	UpdateUserSubscriptionEndpoint       endpoint.Endpoint
	DeleteUserEndpoint                   endpoint.Endpoint
	DeleteUserProfileEndpoint            endpoint.Endpoint
	DeleteSubscriptionEndpoint           endpoint.Endpoint
	GetUserEndpoint                      endpoint.Endpoint
	GetUsersEndpoint                     endpoint.Endpoint
	GetUsersByAccountTypeEndpoint        endpoint.Endpoint
	GetUsersByIntentEndpoint             endpoint.Endpoint
	GetUserProfileEndpoint               endpoint.Endpoint
	GetUserProfilesEndpoint              endpoint.Endpoint
	GetUserProfilesByTypeEndpoint        endpoint.Endpoint
	GetUserProfilesByNationalityEndpoint endpoint.Endpoint
	GetUserSubscriptionsEndpoint         endpoint.Endpoint
	CreateTeamEndpoint                   endpoint.Endpoint
	CreatTeamProfileEndpoint             endpoint.Endpoint
	CreateTeamSubscriptionEndpoint       endpoint.Endpoint
	AddMemberToTeamEndpoint              endpoint.Endpoint
	AddAdvisorToTeamEndpoint             endpoint.Endpoint
	UpdateTeamEndpoint                   endpoint.Endpoint
	UpdateTeamAdminEndpoint              endpoint.Endpoint
	UpdateTeamMemberEndpoint             endpoint.Endpoint
	UpdateTeamAdvisorEndpoint            endpoint.Endpoint
	UpdateTeamProfileEndpoint            endpoint.Endpoint
	UpdateTeamSubscriptionEndpoint       endpoint.Endpoint
	DeleteTeamEndpoint                   endpoint.Endpoint
	DeleteTeamProfileEndpoint            endpoint.Endpoint
	DeleteTeamMemberEndpoint             endpoint.Endpoint
	DeleteTeamAdvisorEndpoint            endpoint.Endpoint
	DeleteTeamAdminEndpoint              endpoint.Endpoint
	DeleteTeamSubscriptionEndpoint       endpoint.Endpoint
	GetTeamEndpoint                      endpoint.Endpoint
	GetTeamProfileEndpoint               endpoint.Endpoint
	GetTeamSubscriptionsEndpoint         endpoint.Endpoint
	GetTeamMembersEndpoint               endpoint.Endpoint
	GetTeamAdvisorsEndpoint              endpoint.Endpoint
	GetTeamAdminEndpoint                 endpoint.Endpoint
	GetTeamsEndpoint                     endpoint.Endpoint
	GetTeamsByTypeEndpoint               endpoint.Endpoint
	GetTeamsByIndustryEndpoint           endpoint.Endpoint
	GetTeamsByNumberOfEmployeesEndpoint  endpoint.Endpoint
	GetTeamProfilesEndpoint              endpoint.Endpoint
	GetTeamsByTagsEndpoint               endpoint.Endpoint
	CreateGroupEndpoint                  endpoint.Endpoint
	AddGroupMemberEndpoint               endpoint.Endpoint
	UpdateGroupEndpoint                  endpoint.Endpoint
	UpdateGroupMemberEndpoint            endpoint.Endpoint
	DeleteGroupEndpoint                  endpoint.Endpoint
	DeleteGroupMemberEndpoint            endpoint.Endpoint
	GetGroupEndpoint                     endpoint.Endpoint
	GetGroupsEndpoint                    endpoint.Endpoint
	GetGroupsByTypeEndpoint              endpoint.Endpoint
	GetGroupsByNumMembersEndpoint        endpoint.Endpoint
	GetGroupsByTagsEndpoint              endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.MicroService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AddAdvisorToTeamEndpoint:             MakeAddAdvisorToTeamEndpoint(s),
		AddGroupMemberEndpoint:               MakeAddGroupMemberEndpoint(s),
		AddMemberToTeamEndpoint:              MakeAddMemberToTeamEndpoint(s),
		CreatTeamProfileEndpoint:             MakeCreatTeamProfileEndpoint(s),
		CreateGroupEndpoint:                  MakeCreateGroupEndpoint(s),
		CreateProfileEndpoint:                MakeCreateProfileEndpoint(s),
		CreateSubscriptionEndpoint:           MakeCreateSubscriptionEndpoint(s),
		CreateSubscriptionsEndpoint:          MakeCreateSubscriptionsEndpoint(s),
		CreateTeamEndpoint:                   MakeCreateTeamEndpoint(s),
		CreateTeamSubscriptionEndpoint:       MakeCreateTeamSubscriptionEndpoint(s),
		CreateUserEndpoint:                   MakeCreateUserEndpoint(s),
		DeleteGroupEndpoint:                  MakeDeleteGroupEndpoint(s),
		DeleteGroupMemberEndpoint:            MakeDeleteGroupMemberEndpoint(s),
		DeleteSubscriptionEndpoint:           MakeDeleteSubscriptionEndpoint(s),
		DeleteTeamAdminEndpoint:              MakeDeleteTeamAdminEndpoint(s),
		DeleteTeamAdvisorEndpoint:            MakeDeleteTeamAdvisorEndpoint(s),
		DeleteTeamEndpoint:                   MakeDeleteTeamEndpoint(s),
		DeleteTeamMemberEndpoint:             MakeDeleteTeamMemberEndpoint(s),
		DeleteTeamProfileEndpoint:            MakeDeleteTeamProfileEndpoint(s),
		DeleteTeamSubscriptionEndpoint:       MakeDeleteTeamSubscriptionEndpoint(s),
		DeleteUserEndpoint:                   MakeDeleteUserEndpoint(s),
		DeleteUserProfileEndpoint:            MakeDeleteUserProfileEndpoint(s),
		GetGroupEndpoint:                     MakeGetGroupEndpoint(s),
		GetGroupsByNumMembersEndpoint:        MakeGetGroupsByNumMembersEndpoint(s),
		GetGroupsByTagsEndpoint:              MakeGetGroupsByTagsEndpoint(s),
		GetGroupsByTypeEndpoint:              MakeGetGroupsByTypeEndpoint(s),
		GetGroupsEndpoint:                    MakeGetGroupsEndpoint(s),
		GetTeamAdminEndpoint:                 MakeGetTeamAdminEndpoint(s),
		GetTeamAdvisorsEndpoint:              MakeGetTeamAdvisorsEndpoint(s),
		GetTeamEndpoint:                      MakeGetTeamEndpoint(s),
		GetTeamMembersEndpoint:               MakeGetTeamMembersEndpoint(s),
		GetTeamProfileEndpoint:               MakeGetTeamProfileEndpoint(s),
		GetTeamProfilesEndpoint:              MakeGetTeamProfilesEndpoint(s),
		GetTeamSubscriptionsEndpoint:         MakeGetTeamSubscriptionsEndpoint(s),
		GetTeamsByIndustryEndpoint:           MakeGetTeamsByIndustryEndpoint(s),
		GetTeamsByNumberOfEmployeesEndpoint:  MakeGetTeamsByNumberOfEmployeesEndpoint(s),
		GetTeamsByTagsEndpoint:               MakeGetTeamsByTagsEndpoint(s),
		GetTeamsByTypeEndpoint:               MakeGetTeamsByTypeEndpoint(s),
		GetTeamsEndpoint:                     MakeGetTeamsEndpoint(s),
		GetUserEndpoint:                      MakeGetUserEndpoint(s),
		GetUserProfileEndpoint:               MakeGetUserProfileEndpoint(s),
		GetUserProfilesByNationalityEndpoint: MakeGetUserProfilesByNationalityEndpoint(s),
		GetUserProfilesByTypeEndpoint:        MakeGetUserProfilesByTypeEndpoint(s),
		GetUserProfilesEndpoint:              MakeGetUserProfilesEndpoint(s),
		GetUserSubscriptionsEndpoint:         MakeGetUserSubscriptionsEndpoint(s),
		GetUsersByAccountTypeEndpoint:        MakeGetUsersByAccountTypeEndpoint(s),
		GetUsersByIntentEndpoint:             MakeGetUsersByIntentEndpoint(s),
		GetUsersEndpoint:                     MakeGetUsersEndpoint(s),
		UpdateGroupEndpoint:                  MakeUpdateGroupEndpoint(s),
		UpdateGroupMemberEndpoint:            MakeUpdateGroupMemberEndpoint(s),
		UpdateTeamAdminEndpoint:              MakeUpdateTeamAdminEndpoint(s),
		UpdateTeamAdvisorEndpoint:            MakeUpdateTeamAdvisorEndpoint(s),
		UpdateTeamEndpoint:                   MakeUpdateTeamEndpoint(s),
		UpdateTeamMemberEndpoint:             MakeUpdateTeamMemberEndpoint(s),
		UpdateTeamProfileEndpoint:            MakeUpdateTeamProfileEndpoint(s),
		UpdateTeamSubscriptionEndpoint:       MakeUpdateTeamSubscriptionEndpoint(s),
		UpdateUserEndpoint:                   MakeUpdateUserEndpoint(s),
		UpdateUserProfileEndpoint:            MakeUpdateUserProfileEndpoint(s),
		UpdateUserSubscriptionEndpoint:       MakeUpdateUserSubscriptionEndpoint(s),
	}
	for _, m := range mdw["CreateUser"] {
		eps.CreateUserEndpoint = m(eps.CreateUserEndpoint)
	}
	for _, m := range mdw["CreateProfile"] {
		eps.CreateProfileEndpoint = m(eps.CreateProfileEndpoint)
	}
	for _, m := range mdw["CreateSubscription"] {
		eps.CreateSubscriptionEndpoint = m(eps.CreateSubscriptionEndpoint)
	}
	for _, m := range mdw["CreateSubscriptions"] {
		eps.CreateSubscriptionsEndpoint = m(eps.CreateSubscriptionsEndpoint)
	}
	for _, m := range mdw["UpdateUser"] {
		eps.UpdateUserEndpoint = m(eps.UpdateUserEndpoint)
	}
	for _, m := range mdw["UpdateUserProfile"] {
		eps.UpdateUserProfileEndpoint = m(eps.UpdateUserProfileEndpoint)
	}
	for _, m := range mdw["UpdateUserSubscription"] {
		eps.UpdateUserSubscriptionEndpoint = m(eps.UpdateUserSubscriptionEndpoint)
	}
	for _, m := range mdw["DeleteUser"] {
		eps.DeleteUserEndpoint = m(eps.DeleteUserEndpoint)
	}
	for _, m := range mdw["DeleteUserProfile"] {
		eps.DeleteUserProfileEndpoint = m(eps.DeleteUserProfileEndpoint)
	}
	for _, m := range mdw["DeleteSubscription"] {
		eps.DeleteSubscriptionEndpoint = m(eps.DeleteSubscriptionEndpoint)
	}
	for _, m := range mdw["GetUser"] {
		eps.GetUserEndpoint = m(eps.GetUserEndpoint)
	}
	for _, m := range mdw["GetUsers"] {
		eps.GetUsersEndpoint = m(eps.GetUsersEndpoint)
	}
	for _, m := range mdw["GetUsersByAccountType"] {
		eps.GetUsersByAccountTypeEndpoint = m(eps.GetUsersByAccountTypeEndpoint)
	}
	for _, m := range mdw["GetUsersByIntent"] {
		eps.GetUsersByIntentEndpoint = m(eps.GetUsersByIntentEndpoint)
	}
	for _, m := range mdw["GetUserProfile"] {
		eps.GetUserProfileEndpoint = m(eps.GetUserProfileEndpoint)
	}
	for _, m := range mdw["GetUserProfiles"] {
		eps.GetUserProfilesEndpoint = m(eps.GetUserProfilesEndpoint)
	}
	for _, m := range mdw["GetUserProfilesByType"] {
		eps.GetUserProfilesByTypeEndpoint = m(eps.GetUserProfilesByTypeEndpoint)
	}
	for _, m := range mdw["GetUserProfilesByNationality"] {
		eps.GetUserProfilesByNationalityEndpoint = m(eps.GetUserProfilesByNationalityEndpoint)
	}
	for _, m := range mdw["GetUserSubscriptions"] {
		eps.GetUserSubscriptionsEndpoint = m(eps.GetUserSubscriptionsEndpoint)
	}
	for _, m := range mdw["CreateTeam"] {
		eps.CreateTeamEndpoint = m(eps.CreateTeamEndpoint)
	}
	for _, m := range mdw["CreatTeamProfile"] {
		eps.CreatTeamProfileEndpoint = m(eps.CreatTeamProfileEndpoint)
	}
	for _, m := range mdw["CreateTeamSubscription"] {
		eps.CreateTeamSubscriptionEndpoint = m(eps.CreateTeamSubscriptionEndpoint)
	}
	for _, m := range mdw["AddMemberToTeam"] {
		eps.AddMemberToTeamEndpoint = m(eps.AddMemberToTeamEndpoint)
	}
	for _, m := range mdw["AddAdvisorToTeam"] {
		eps.AddAdvisorToTeamEndpoint = m(eps.AddAdvisorToTeamEndpoint)
	}
	for _, m := range mdw["UpdateTeam"] {
		eps.UpdateTeamEndpoint = m(eps.UpdateTeamEndpoint)
	}
	for _, m := range mdw["UpdateTeamAdmin"] {
		eps.UpdateTeamAdminEndpoint = m(eps.UpdateTeamAdminEndpoint)
	}
	for _, m := range mdw["UpdateTeamMember"] {
		eps.UpdateTeamMemberEndpoint = m(eps.UpdateTeamMemberEndpoint)
	}
	for _, m := range mdw["UpdateTeamAdvisor"] {
		eps.UpdateTeamAdvisorEndpoint = m(eps.UpdateTeamAdvisorEndpoint)
	}
	for _, m := range mdw["UpdateTeamProfile"] {
		eps.UpdateTeamProfileEndpoint = m(eps.UpdateTeamProfileEndpoint)
	}
	for _, m := range mdw["UpdateTeamSubscription"] {
		eps.UpdateTeamSubscriptionEndpoint = m(eps.UpdateTeamSubscriptionEndpoint)
	}
	for _, m := range mdw["DeleteTeam"] {
		eps.DeleteTeamEndpoint = m(eps.DeleteTeamEndpoint)
	}
	for _, m := range mdw["DeleteTeamProfile"] {
		eps.DeleteTeamProfileEndpoint = m(eps.DeleteTeamProfileEndpoint)
	}
	for _, m := range mdw["DeleteTeamMember"] {
		eps.DeleteTeamMemberEndpoint = m(eps.DeleteTeamMemberEndpoint)
	}
	for _, m := range mdw["DeleteTeamAdvisor"] {
		eps.DeleteTeamAdvisorEndpoint = m(eps.DeleteTeamAdvisorEndpoint)
	}
	for _, m := range mdw["DeleteTeamAdmin"] {
		eps.DeleteTeamAdminEndpoint = m(eps.DeleteTeamAdminEndpoint)
	}
	for _, m := range mdw["DeleteTeamSubscription"] {
		eps.DeleteTeamSubscriptionEndpoint = m(eps.DeleteTeamSubscriptionEndpoint)
	}
	for _, m := range mdw["GetTeam"] {
		eps.GetTeamEndpoint = m(eps.GetTeamEndpoint)
	}
	for _, m := range mdw["GetTeamProfile"] {
		eps.GetTeamProfileEndpoint = m(eps.GetTeamProfileEndpoint)
	}
	for _, m := range mdw["GetTeamSubscriptions"] {
		eps.GetTeamSubscriptionsEndpoint = m(eps.GetTeamSubscriptionsEndpoint)
	}
	for _, m := range mdw["GetTeamMembers"] {
		eps.GetTeamMembersEndpoint = m(eps.GetTeamMembersEndpoint)
	}
	for _, m := range mdw["GetTeamAdvisors"] {
		eps.GetTeamAdvisorsEndpoint = m(eps.GetTeamAdvisorsEndpoint)
	}
	for _, m := range mdw["GetTeamAdmin"] {
		eps.GetTeamAdminEndpoint = m(eps.GetTeamAdminEndpoint)
	}
	for _, m := range mdw["GetTeams"] {
		eps.GetTeamsEndpoint = m(eps.GetTeamsEndpoint)
	}
	for _, m := range mdw["GetTeamsByType"] {
		eps.GetTeamsByTypeEndpoint = m(eps.GetTeamsByTypeEndpoint)
	}
	for _, m := range mdw["GetTeamsByIndustry"] {
		eps.GetTeamsByIndustryEndpoint = m(eps.GetTeamsByIndustryEndpoint)
	}
	for _, m := range mdw["GetTeamsByNumberOfEmployees"] {
		eps.GetTeamsByNumberOfEmployeesEndpoint = m(eps.GetTeamsByNumberOfEmployeesEndpoint)
	}
	for _, m := range mdw["GetTeamProfiles"] {
		eps.GetTeamProfilesEndpoint = m(eps.GetTeamProfilesEndpoint)
	}
	for _, m := range mdw["GetTeamsByTags"] {
		eps.GetTeamsByTagsEndpoint = m(eps.GetTeamsByTagsEndpoint)
	}
	for _, m := range mdw["CreateGroup"] {
		eps.CreateGroupEndpoint = m(eps.CreateGroupEndpoint)
	}
	for _, m := range mdw["AddGroupMember"] {
		eps.AddGroupMemberEndpoint = m(eps.AddGroupMemberEndpoint)
	}
	for _, m := range mdw["UpdateGroup"] {
		eps.UpdateGroupEndpoint = m(eps.UpdateGroupEndpoint)
	}
	for _, m := range mdw["UpdateGroupMember"] {
		eps.UpdateGroupMemberEndpoint = m(eps.UpdateGroupMemberEndpoint)
	}
	for _, m := range mdw["DeleteGroup"] {
		eps.DeleteGroupEndpoint = m(eps.DeleteGroupEndpoint)
	}
	for _, m := range mdw["DeleteGroupMember"] {
		eps.DeleteGroupMemberEndpoint = m(eps.DeleteGroupMemberEndpoint)
	}
	for _, m := range mdw["GetGroup"] {
		eps.GetGroupEndpoint = m(eps.GetGroupEndpoint)
	}
	for _, m := range mdw["GetGroups"] {
		eps.GetGroupsEndpoint = m(eps.GetGroupsEndpoint)
	}
	for _, m := range mdw["GetGroupsByType"] {
		eps.GetGroupsByTypeEndpoint = m(eps.GetGroupsByTypeEndpoint)
	}
	for _, m := range mdw["GetGroupsByNumMembers"] {
		eps.GetGroupsByNumMembersEndpoint = m(eps.GetGroupsByNumMembersEndpoint)
	}
	for _, m := range mdw["GetGroupsByTags"] {
		eps.GetGroupsByTagsEndpoint = m(eps.GetGroupsByTagsEndpoint)
	}
	return eps
}

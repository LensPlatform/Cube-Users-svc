// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice HTTP server types
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package server

import (
	usersmicroservice "github.com/LensPlatform/cube_users/gen/users_microservice"
	goa "goa.design/goa/v3/pkg"
)

// SigninRequestBody is the type of the "users-microservice" service "signin"
// endpoint HTTP request body.
type SigninRequestBody struct {
	// Email used to perform sigin
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// CreateUserRequestBody is the type of the "users-microservice" service
// "CreateUser" endpoint HTTP request body.
type CreateUserRequestBody struct {
	// User to be created
	User *UserRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// CreateProfileRequestBody is the type of the "users-microservice" service
// "CreateProfile" endpoint HTTP request body.
type CreateProfileRequestBody struct {
	// Profile
	Profile *ProfileRequestBody `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
	// user id token which the profile is tied to
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// CreateUserSubscriptionRequestBody is the type of the "users-microservice"
// service "CreateUserSubscription" endpoint HTTP request body.
type CreateUserSubscriptionRequestBody struct {
	// User Subscription
	Subscription *SubscriptionRequestBody `form:"subscription,omitempty" json:"subscription,omitempty" xml:"subscription,omitempty"`
	// user id to which the subscription is to be created for
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// SigninResponseBody is the type of the "users-microservice" service "signin"
// endpoint HTTP response body.
type SigninResponseBody struct {
	// JWT token
	JWT string `form:"jwt" json:"jwt" xml:"jwt"`
	// API Key
	APIKey string `form:"api_key" json:"api_key" xml:"api_key"`
	// OAuth2 token
	OauthToken string `form:"oauth_token" json:"oauth_token" xml:"oauth_token"`
}

// GetUserResponseBody is the type of the "users-microservice" service
// "GetUser" endpoint HTTP response body.
type GetUserResponseBody struct {
	Body interface{} `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// SigninUnauthorizedResponseBody is the type of the "users-microservice"
// service "signin" endpoint HTTP response body for the "unauthorized" error.
type SigninUnauthorizedResponseBody string

// CreateUserTimeoutResponseBody is the type of the "users-microservice"
// service "CreateUser" endpoint HTTP response body for the "timeout" error.
type CreateUserTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateUserUnauthorizedResponseBody is the type of the "users-microservice"
// service "CreateUser" endpoint HTTP response body for the "unauthorized"
// error.
type CreateUserUnauthorizedResponseBody string

// CreateProfileTimeoutResponseBody is the type of the "users-microservice"
// service "CreateProfile" endpoint HTTP response body for the "timeout" error.
type CreateProfileTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProfileUnauthorizedResponseBody is the type of the
// "users-microservice" service "CreateProfile" endpoint HTTP response body for
// the "unauthorized" error.
type CreateProfileUnauthorizedResponseBody string

// CreateUserSubscriptionTimeoutResponseBody is the type of the
// "users-microservice" service "CreateUserSubscription" endpoint HTTP response
// body for the "timeout" error.
type CreateUserSubscriptionTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateUserSubscriptionUnauthorizedResponseBody is the type of the
// "users-microservice" service "CreateUserSubscription" endpoint HTTP response
// body for the "unauthorized" error.
type CreateUserSubscriptionUnauthorizedResponseBody string

// GetUserTimeoutResponseBody is the type of the "users-microservice" service
// "GetUser" endpoint HTTP response body for the "timeout" error.
type GetUserTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserUnauthorizedResponseBody is the type of the "users-microservice"
// service "GetUser" endpoint HTTP response body for the "unauthorized" error.
type GetUserUnauthorizedResponseBody string

// UserRequestBody is used to define fields on request body types.
type UserRequestBody struct {
	Body interface{} `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// ProfileRequestBody is used to define fields on request body types.
type ProfileRequestBody struct {
	Body interface{} `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// SubscriptionRequestBody is used to define fields on request body types.
type SubscriptionRequestBody struct {
	Body interface{} `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// NewSigninResponseBody builds the HTTP response body from the result of the
// "signin" endpoint of the "users-microservice" service.
func NewSigninResponseBody(res *usersmicroservice.Creds) *SigninResponseBody {
	body := &SigninResponseBody{
		JWT:        res.JWT,
		APIKey:     res.APIKey,
		OauthToken: res.OauthToken,
	}
	return body
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "GetUser" endpoint of the "users-microservice" service.
func NewGetUserResponseBody(res *usersmicroservice.User) *GetUserResponseBody {
	body := &GetUserResponseBody{
		Body: res.Body,
	}
	return body
}

// NewSigninUnauthorizedResponseBody builds the HTTP response body from the
// result of the "signin" endpoint of the "users-microservice" service.
func NewSigninUnauthorizedResponseBody(res usersmicroservice.Unauthorized) SigninUnauthorizedResponseBody {
	body := SigninUnauthorizedResponseBody(res)
	return body
}

// NewCreateUserTimeoutResponseBody builds the HTTP response body from the
// result of the "CreateUser" endpoint of the "users-microservice" service.
func NewCreateUserTimeoutResponseBody(res *goa.ServiceError) *CreateUserTimeoutResponseBody {
	body := &CreateUserTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUserUnauthorizedResponseBody builds the HTTP response body from the
// result of the "CreateUser" endpoint of the "users-microservice" service.
func NewCreateUserUnauthorizedResponseBody(res usersmicroservice.Unauthorized) CreateUserUnauthorizedResponseBody {
	body := CreateUserUnauthorizedResponseBody(res)
	return body
}

// NewCreateProfileTimeoutResponseBody builds the HTTP response body from the
// result of the "CreateProfile" endpoint of the "users-microservice" service.
func NewCreateProfileTimeoutResponseBody(res *goa.ServiceError) *CreateProfileTimeoutResponseBody {
	body := &CreateProfileTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProfileUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateProfile" endpoint of the "users-microservice"
// service.
func NewCreateProfileUnauthorizedResponseBody(res usersmicroservice.Unauthorized) CreateProfileUnauthorizedResponseBody {
	body := CreateProfileUnauthorizedResponseBody(res)
	return body
}

// NewCreateUserSubscriptionTimeoutResponseBody builds the HTTP response body
// from the result of the "CreateUserSubscription" endpoint of the
// "users-microservice" service.
func NewCreateUserSubscriptionTimeoutResponseBody(res *goa.ServiceError) *CreateUserSubscriptionTimeoutResponseBody {
	body := &CreateUserSubscriptionTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateUserSubscriptionUnauthorizedResponseBody builds the HTTP response
// body from the result of the "CreateUserSubscription" endpoint of the
// "users-microservice" service.
func NewCreateUserSubscriptionUnauthorizedResponseBody(res usersmicroservice.Unauthorized) CreateUserSubscriptionUnauthorizedResponseBody {
	body := CreateUserSubscriptionUnauthorizedResponseBody(res)
	return body
}

// NewGetUserTimeoutResponseBody builds the HTTP response body from the result
// of the "GetUser" endpoint of the "users-microservice" service.
func NewGetUserTimeoutResponseBody(res *goa.ServiceError) *GetUserTimeoutResponseBody {
	body := &GetUserTimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserUnauthorizedResponseBody builds the HTTP response body from the
// result of the "GetUser" endpoint of the "users-microservice" service.
func NewGetUserUnauthorizedResponseBody(res usersmicroservice.Unauthorized) GetUserUnauthorizedResponseBody {
	body := GetUserUnauthorizedResponseBody(res)
	return body
}

// NewSigninPayload builds a users-microservice service signin endpoint payload.
func NewSigninPayload(body *SigninRequestBody) *usersmicroservice.SigninPayload {
	v := &usersmicroservice.SigninPayload{
		Email: body.Email,
	}

	return v
}

// NewCreateUserPayload builds a users-microservice service CreateUser endpoint
// payload.
func NewCreateUserPayload(body *CreateUserRequestBody) *usersmicroservice.CreateUserPayload {
	v := &usersmicroservice.CreateUserPayload{}
	v.User = unmarshalUserRequestBodyToUsersmicroserviceUser(body.User)

	return v
}

// NewCreateProfilePayload builds a users-microservice service CreateProfile
// endpoint payload.
func NewCreateProfilePayload(body *CreateProfileRequestBody) *usersmicroservice.CreateProfilePayload {
	v := &usersmicroservice.CreateProfilePayload{
		UserID: *body.UserID,
	}
	v.Profile = unmarshalProfileRequestBodyToUsersmicroserviceProfile(body.Profile)

	return v
}

// NewCreateUserSubscriptionPayload builds a users-microservice service
// CreateUserSubscription endpoint payload.
func NewCreateUserSubscriptionPayload(body *CreateUserSubscriptionRequestBody) *usersmicroservice.CreateUserSubscriptionPayload {
	v := &usersmicroservice.CreateUserSubscriptionPayload{
		UserID: *body.UserID,
	}
	v.Subscription = unmarshalSubscriptionRequestBodyToUsersmicroserviceSubscription(body.Subscription)

	return v
}

// NewGetUserPayload builds a users-microservice service GetUser endpoint
// payload.
func NewGetUserPayload(userID int64) *usersmicroservice.GetUserPayload {
	v := &usersmicroservice.GetUserPayload{}
	v.UserID = userID

	return v
}

// ValidateCreateUserRequestBody runs the validations defined on
// CreateUserRequestBody
func ValidateCreateUserRequestBody(body *CreateUserRequestBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	return
}

// ValidateCreateProfileRequestBody runs the validations defined on
// CreateProfileRequestBody
func ValidateCreateProfileRequestBody(body *CreateProfileRequestBody) (err error) {
	if body.Profile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("profile", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	return
}

// ValidateCreateUserSubscriptionRequestBody runs the validations defined on
// CreateUserSubscriptionRequestBody
func ValidateCreateUserSubscriptionRequestBody(body *CreateUserSubscriptionRequestBody) (err error) {
	if body.Subscription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subscription", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	return
}

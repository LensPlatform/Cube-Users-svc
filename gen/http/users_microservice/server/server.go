// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice HTTP server
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package server

import (
	"context"
	"net/http"

	usersmicroservice "github.com/LensPlatform/cube_users/gen/users_microservice"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the users-microservice service endpoint HTTP handlers.
type Server struct {
	Mounts                 []*MountPoint
	Signin                 http.Handler
	CreateUser             http.Handler
	CreateProfile          http.Handler
	CreateUserSubscription http.Handler
	GetUser                http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the users-microservice service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *usersmicroservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Signin", "POST", "/users-microservice/signin"},
			{"CreateUser", "POST", "/users-microservice/user/user-account?payload={user}"},
			{"CreateProfile", "POST", "/users-microservice/user/user-profile?payload1={profile}&payload2={user_id}"},
			{"CreateUserSubscription", "POST", "/users-microservice/user/subscription?payload1={subscription}&&payload2={user_id}"},
			{"GetUser", "GET", "/users-microservice/user/{user_id}"},
			{"../../gen/http/openapi.json", "GET", "/users-microservice/swagger.json"},
		},
		Signin:                 NewSigninHandler(e.Signin, mux, decoder, encoder, errhandler, formatter),
		CreateUser:             NewCreateUserHandler(e.CreateUser, mux, decoder, encoder, errhandler, formatter),
		CreateProfile:          NewCreateProfileHandler(e.CreateProfile, mux, decoder, encoder, errhandler, formatter),
		CreateUserSubscription: NewCreateUserSubscriptionHandler(e.CreateUserSubscription, mux, decoder, encoder, errhandler, formatter),
		GetUser:                NewGetUserHandler(e.GetUser, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "users-microservice" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Signin = m(s.Signin)
	s.CreateUser = m(s.CreateUser)
	s.CreateProfile = m(s.CreateProfile)
	s.CreateUserSubscription = m(s.CreateUserSubscription)
	s.GetUser = m(s.GetUser)
}

// Mount configures the mux to serve the users-microservice endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSigninHandler(mux, h.Signin)
	MountCreateUserHandler(mux, h.CreateUser)
	MountCreateProfileHandler(mux, h.CreateProfile)
	MountCreateUserSubscriptionHandler(mux, h.CreateUserSubscription)
	MountGetUserHandler(mux, h.GetUser)
	MountGenHTTPOpenapiJSON(mux, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "../../gen/http/openapi.json")
	}))
}

// MountSigninHandler configures the mux to serve the "users-microservice"
// service "signin" endpoint.
func MountSigninHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/users-microservice/signin", f)
}

// NewSigninHandler creates a HTTP handler which loads the HTTP request and
// calls the "users-microservice" service "signin" endpoint.
func NewSigninHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSigninRequest(mux, decoder)
		encodeResponse = EncodeSigninResponse(encoder)
		encodeError    = EncodeSigninError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "signin")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateUserHandler configures the mux to serve the "users-microservice"
// service "CreateUser" endpoint.
func MountCreateUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/users-microservice/user/user-account?payload={user}", f)
}

// NewCreateUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "users-microservice" service "CreateUser" endpoint.
func NewCreateUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateUserRequest(mux, decoder)
		encodeResponse = EncodeCreateUserResponse(encoder)
		encodeError    = EncodeCreateUserError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateProfileHandler configures the mux to serve the
// "users-microservice" service "CreateProfile" endpoint.
func MountCreateProfileHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/users-microservice/user/user-profile?payload1={profile}&payload2={user_id}", f)
}

// NewCreateProfileHandler creates a HTTP handler which loads the HTTP request
// and calls the "users-microservice" service "CreateProfile" endpoint.
func NewCreateProfileHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateProfileRequest(mux, decoder)
		encodeResponse = EncodeCreateProfileResponse(encoder)
		encodeError    = EncodeCreateProfileError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateProfile")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateUserSubscriptionHandler configures the mux to serve the
// "users-microservice" service "CreateUserSubscription" endpoint.
func MountCreateUserSubscriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/users-microservice/user/subscription?payload1={subscription}&&payload2={user_id}", f)
}

// NewCreateUserSubscriptionHandler creates a HTTP handler which loads the HTTP
// request and calls the "users-microservice" service "CreateUserSubscription"
// endpoint.
func NewCreateUserSubscriptionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateUserSubscriptionRequest(mux, decoder)
		encodeResponse = EncodeCreateUserSubscriptionResponse(encoder)
		encodeError    = EncodeCreateUserSubscriptionError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateUserSubscription")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetUserHandler configures the mux to serve the "users-microservice"
// service "GetUser" endpoint.
func MountGetUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/users-microservice/user/{user_id}", f)
}

// NewGetUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "users-microservice" service "GetUser" endpoint.
func NewGetUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetUserRequest(mux, decoder)
		encodeResponse = EncodeGetUserResponse(encoder)
		encodeError    = EncodeGetUserError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapiJSON configures the mux to serve GET request made to
// "/users-microservice/swagger.json".
func MountGenHTTPOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/users-microservice/swagger.json", h.ServeHTTP)
}

// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice HTTP client types
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package client

import (
	usersmicroservice "github.com/LensPlatform/cube_users/gen/users_microservice"
	goa "goa.design/goa/v3/pkg"
)

// SigninRequestBody is the type of the "users-microservice" service "signin"
// endpoint HTTP request body.
type SigninRequestBody struct {
	// Email used to perform sigin
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// CreateUserRequestBody is the type of the "users-microservice" service
// "CreateUser" endpoint HTTP request body.
type CreateUserRequestBody struct {
	// User to be created
	User *UserRequestBody `form:"user" json:"user" xml:"user"`
}

// CreateProfileRequestBody is the type of the "users-microservice" service
// "CreateProfile" endpoint HTTP request body.
type CreateProfileRequestBody struct {
	// Profile
	Profile *ProfileRequestBody `form:"profile" json:"profile" xml:"profile"`
	// user id token which the profile is tied to
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
}

// CreateUserSubscriptionRequestBody is the type of the "users-microservice"
// service "CreateUserSubscription" endpoint HTTP request body.
type CreateUserSubscriptionRequestBody struct {
	// User Subscription
	Subscription *SubscriptionRequestBody `form:"subscription" json:"subscription" xml:"subscription"`
	// user id to which the subscription is to be created for
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
}

// SigninResponseBody is the type of the "users-microservice" service "signin"
// endpoint HTTP response body.
type SigninResponseBody struct {
	// JWT token
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
	// API Key
	APIKey *string `form:"api_key,omitempty" json:"api_key,omitempty" xml:"api_key,omitempty"`
	// OAuth2 token
	OauthToken *string `form:"oauth_token,omitempty" json:"oauth_token,omitempty" xml:"oauth_token,omitempty"`
}

// GetUserResponseBody is the type of the "users-microservice" service
// "GetUser" endpoint HTTP response body.
type GetUserResponseBody struct {
	Body interface{} `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// SigninUnauthorizedResponseBody is the type of the "users-microservice"
// service "signin" endpoint HTTP response body for the "unauthorized" error.
type SigninUnauthorizedResponseBody string

// CreateUserTimeoutResponseBody is the type of the "users-microservice"
// service "CreateUser" endpoint HTTP response body for the "timeout" error.
type CreateUserTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateUserUnauthorizedResponseBody is the type of the "users-microservice"
// service "CreateUser" endpoint HTTP response body for the "unauthorized"
// error.
type CreateUserUnauthorizedResponseBody string

// CreateProfileTimeoutResponseBody is the type of the "users-microservice"
// service "CreateProfile" endpoint HTTP response body for the "timeout" error.
type CreateProfileTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateProfileUnauthorizedResponseBody is the type of the
// "users-microservice" service "CreateProfile" endpoint HTTP response body for
// the "unauthorized" error.
type CreateProfileUnauthorizedResponseBody string

// CreateUserSubscriptionTimeoutResponseBody is the type of the
// "users-microservice" service "CreateUserSubscription" endpoint HTTP response
// body for the "timeout" error.
type CreateUserSubscriptionTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateUserSubscriptionUnauthorizedResponseBody is the type of the
// "users-microservice" service "CreateUserSubscription" endpoint HTTP response
// body for the "unauthorized" error.
type CreateUserSubscriptionUnauthorizedResponseBody string

// GetUserTimeoutResponseBody is the type of the "users-microservice" service
// "GetUser" endpoint HTTP response body for the "timeout" error.
type GetUserTimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserUnauthorizedResponseBody is the type of the "users-microservice"
// service "GetUser" endpoint HTTP response body for the "unauthorized" error.
type GetUserUnauthorizedResponseBody string

// UserRequestBody is used to define fields on request body types.
type UserRequestBody struct {
	Body interface{} `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// ProfileRequestBody is used to define fields on request body types.
type ProfileRequestBody struct {
	Body interface{} `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// SubscriptionRequestBody is used to define fields on request body types.
type SubscriptionRequestBody struct {
	Body interface{} `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// NewSigninRequestBody builds the HTTP request body from the payload of the
// "signin" endpoint of the "users-microservice" service.
func NewSigninRequestBody(p *usersmicroservice.SigninPayload) *SigninRequestBody {
	body := &SigninRequestBody{
		Email: p.Email,
	}
	return body
}

// NewCreateUserRequestBody builds the HTTP request body from the payload of
// the "CreateUser" endpoint of the "users-microservice" service.
func NewCreateUserRequestBody(p *usersmicroservice.CreateUserPayload) *CreateUserRequestBody {
	body := &CreateUserRequestBody{}
	if p.User != nil {
		body.User = marshalUsersmicroserviceUserToUserRequestBody(p.User)
	}
	return body
}

// NewCreateProfileRequestBody builds the HTTP request body from the payload of
// the "CreateProfile" endpoint of the "users-microservice" service.
func NewCreateProfileRequestBody(p *usersmicroservice.CreateProfilePayload) *CreateProfileRequestBody {
	body := &CreateProfileRequestBody{
		UserID: p.UserID,
	}
	if p.Profile != nil {
		body.Profile = marshalUsersmicroserviceProfileToProfileRequestBody(p.Profile)
	}
	return body
}

// NewCreateUserSubscriptionRequestBody builds the HTTP request body from the
// payload of the "CreateUserSubscription" endpoint of the "users-microservice"
// service.
func NewCreateUserSubscriptionRequestBody(p *usersmicroservice.CreateUserSubscriptionPayload) *CreateUserSubscriptionRequestBody {
	body := &CreateUserSubscriptionRequestBody{
		UserID: p.UserID,
	}
	if p.Subscription != nil {
		body.Subscription = marshalUsersmicroserviceSubscriptionToSubscriptionRequestBody(p.Subscription)
	}
	return body
}

// NewSigninCredsOK builds a "users-microservice" service "signin" endpoint
// result from a HTTP "OK" response.
func NewSigninCredsOK(body *SigninResponseBody) *usersmicroservice.Creds {
	v := &usersmicroservice.Creds{
		JWT:        *body.JWT,
		APIKey:     *body.APIKey,
		OauthToken: *body.OauthToken,
	}

	return v
}

// NewSigninUnauthorized builds a users-microservice service signin endpoint
// unauthorized error.
func NewSigninUnauthorized(body SigninUnauthorizedResponseBody) usersmicroservice.Unauthorized {
	v := usersmicroservice.Unauthorized(body)
	return v
}

// NewCreateUserTimeout builds a users-microservice service CreateUser endpoint
// timeout error.
func NewCreateUserTimeout(body *CreateUserTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateUserUnauthorized builds a users-microservice service CreateUser
// endpoint unauthorized error.
func NewCreateUserUnauthorized(body CreateUserUnauthorizedResponseBody) usersmicroservice.Unauthorized {
	v := usersmicroservice.Unauthorized(body)
	return v
}

// NewCreateProfileTimeout builds a users-microservice service CreateProfile
// endpoint timeout error.
func NewCreateProfileTimeout(body *CreateProfileTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateProfileUnauthorized builds a users-microservice service
// CreateProfile endpoint unauthorized error.
func NewCreateProfileUnauthorized(body CreateProfileUnauthorizedResponseBody) usersmicroservice.Unauthorized {
	v := usersmicroservice.Unauthorized(body)
	return v
}

// NewCreateUserSubscriptionTimeout builds a users-microservice service
// CreateUserSubscription endpoint timeout error.
func NewCreateUserSubscriptionTimeout(body *CreateUserSubscriptionTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateUserSubscriptionUnauthorized builds a users-microservice service
// CreateUserSubscription endpoint unauthorized error.
func NewCreateUserSubscriptionUnauthorized(body CreateUserSubscriptionUnauthorizedResponseBody) usersmicroservice.Unauthorized {
	v := usersmicroservice.Unauthorized(body)
	return v
}

// NewGetUserUserOK builds a "users-microservice" service "GetUser" endpoint
// result from a HTTP "OK" response.
func NewGetUserUserOK(body *GetUserResponseBody) *usersmicroservice.User {
	v := &usersmicroservice.User{
		Body: body.Body,
	}

	return v
}

// NewGetUserTimeout builds a users-microservice service GetUser endpoint
// timeout error.
func NewGetUserTimeout(body *GetUserTimeoutResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserUnauthorized builds a users-microservice service GetUser endpoint
// unauthorized error.
func NewGetUserUnauthorized(body GetUserUnauthorizedResponseBody) usersmicroservice.Unauthorized {
	v := usersmicroservice.Unauthorized(body)
	return v
}

// ValidateSigninResponseBody runs the validations defined on SigninResponseBody
func ValidateSigninResponseBody(body *SigninResponseBody) (err error) {
	if body.JWT == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jwt", "body"))
	}
	if body.APIKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("api_key", "body"))
	}
	if body.OauthToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("oauth_token", "body"))
	}
	return
}

// ValidateCreateUserTimeoutResponseBody runs the validations defined on
// CreateUser_timeout_Response_Body
func ValidateCreateUserTimeoutResponseBody(body *CreateUserTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateProfileTimeoutResponseBody runs the validations defined on
// CreateProfile_timeout_Response_Body
func ValidateCreateProfileTimeoutResponseBody(body *CreateProfileTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateUserSubscriptionTimeoutResponseBody runs the validations
// defined on CreateUserSubscription_timeout_Response_Body
func ValidateCreateUserSubscriptionTimeoutResponseBody(body *CreateUserSubscriptionTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserTimeoutResponseBody runs the validations defined on
// GetUser_timeout_Response_Body
func ValidateGetUserTimeoutResponseBody(body *GetUserTimeoutResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	usersmicroservice "github.com/LensPlatform/cube_users/gen/users_microservice"
	goahttp "goa.design/goa/v3/http"
)

// BuildSigninRequest instantiates a HTTP request object with method and path
// set to call the "users-microservice" service "signin" endpoint
func (c *Client) BuildSigninRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SigninUsersMicroservicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users-microservice", "signin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSigninRequest returns an encoder for requests sent to the
// users-microservice signin server.
func EncodeSigninRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*usersmicroservice.SigninPayload)
		if !ok {
			return goahttp.ErrInvalidType("users-microservice", "signin", "*usersmicroservice.SigninPayload", v)
		}
		body := NewSigninRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users-microservice", "signin", err)
		}
		req.SetBasicAuth(p.Username, p.Password)
		return nil
	}
}

// DecodeSigninResponse returns a decoder for responses returned by the
// users-microservice signin endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeSigninResponse may return the following errors:
//	- "unauthorized" (type usersmicroservice.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeSigninResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SigninResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "signin", err)
			}
			err = ValidateSigninResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users-microservice", "signin", err)
			}
			res := NewSigninCredsOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SigninUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "signin", err)
			}
			return nil, NewSigninUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users-microservice", "signin", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateUserRequest instantiates a HTTP request object with method and
// path set to call the "users-microservice" service "CreateUser" endpoint
func (c *Client) BuildCreateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserUsersMicroservicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users-microservice", "CreateUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserRequest returns an encoder for requests sent to the
// users-microservice CreateUser server.
func EncodeCreateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*usersmicroservice.CreateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users-microservice", "CreateUser", "*usersmicroservice.CreateUserPayload", v)
		}
		body := NewCreateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users-microservice", "CreateUser", err)
		}
		return nil
	}
}

// DecodeCreateUserResponse returns a decoder for responses returned by the
// users-microservice CreateUser endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateUserResponse may return the following errors:
//	- "timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- "unauthorized" (type usersmicroservice.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateUser", err)
			}
			return body, nil
		case http.StatusGatewayTimeout:
			var (
				body CreateUserTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateUser", err)
			}
			err = ValidateCreateUserTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users-microservice", "CreateUser", err)
			}
			return nil, NewCreateUserTimeout(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateUser", err)
			}
			return nil, NewCreateUserUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users-microservice", "CreateUser", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateProfileRequest instantiates a HTTP request object with method and
// path set to call the "users-microservice" service "CreateProfile" endpoint
func (c *Client) BuildCreateProfileRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateProfileUsersMicroservicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users-microservice", "CreateProfile", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateProfileRequest returns an encoder for requests sent to the
// users-microservice CreateProfile server.
func EncodeCreateProfileRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*usersmicroservice.CreateProfilePayload)
		if !ok {
			return goahttp.ErrInvalidType("users-microservice", "CreateProfile", "*usersmicroservice.CreateProfilePayload", v)
		}
		body := NewCreateProfileRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users-microservice", "CreateProfile", err)
		}
		return nil
	}
}

// DecodeCreateProfileResponse returns a decoder for responses returned by the
// users-microservice CreateProfile endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateProfileResponse may return the following errors:
//	- "timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- "unauthorized" (type usersmicroservice.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateProfileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateProfile", err)
			}
			return body, nil
		case http.StatusGatewayTimeout:
			var (
				body CreateProfileTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateProfile", err)
			}
			err = ValidateCreateProfileTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users-microservice", "CreateProfile", err)
			}
			return nil, NewCreateProfileTimeout(&body)
		case http.StatusUnauthorized:
			var (
				body CreateProfileUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateProfile", err)
			}
			return nil, NewCreateProfileUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users-microservice", "CreateProfile", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateUserSubscriptionRequest instantiates a HTTP request object with
// method and path set to call the "users-microservice" service
// "CreateUserSubscription" endpoint
func (c *Client) BuildCreateUserSubscriptionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserSubscriptionUsersMicroservicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users-microservice", "CreateUserSubscription", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserSubscriptionRequest returns an encoder for requests sent to
// the users-microservice CreateUserSubscription server.
func EncodeCreateUserSubscriptionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*usersmicroservice.CreateUserSubscriptionPayload)
		if !ok {
			return goahttp.ErrInvalidType("users-microservice", "CreateUserSubscription", "*usersmicroservice.CreateUserSubscriptionPayload", v)
		}
		body := NewCreateUserSubscriptionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users-microservice", "CreateUserSubscription", err)
		}
		return nil
	}
}

// DecodeCreateUserSubscriptionResponse returns a decoder for responses
// returned by the users-microservice CreateUserSubscription endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeCreateUserSubscriptionResponse may return the following errors:
//	- "timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- "unauthorized" (type usersmicroservice.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateUserSubscriptionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateUserSubscription", err)
			}
			return body, nil
		case http.StatusGatewayTimeout:
			var (
				body CreateUserSubscriptionTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateUserSubscription", err)
			}
			err = ValidateCreateUserSubscriptionTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users-microservice", "CreateUserSubscription", err)
			}
			return nil, NewCreateUserSubscriptionTimeout(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUserSubscriptionUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "CreateUserSubscription", err)
			}
			return nil, NewCreateUserSubscriptionUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users-microservice", "CreateUserSubscription", resp.StatusCode, string(body))
		}
	}
}

// BuildGetUserRequest instantiates a HTTP request object with method and path
// set to call the "users-microservice" service "GetUser" endpoint
func (c *Client) BuildGetUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID string
	)
	{
		p, ok := v.(*usersmicroservice.GetUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users-microservice", "GetUser", "*usersmicroservice.GetUserPayload", v)
		}
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserUsersMicroservicePath(userID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users-microservice", "GetUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetUserResponse returns a decoder for responses returned by the
// users-microservice GetUser endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetUserResponse may return the following errors:
//	- "timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//	- "unauthorized" (type usersmicroservice.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeGetUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "GetUser", err)
			}
			return body, nil
		case http.StatusGatewayTimeout:
			var (
				body GetUserTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "GetUser", err)
			}
			err = ValidateGetUserTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users-microservice", "GetUser", err)
			}
			return nil, NewGetUserTimeout(&body)
		case http.StatusUnauthorized:
			var (
				body GetUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users-microservice", "GetUser", err)
			}
			return nil, NewGetUserUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users-microservice", "GetUser", resp.StatusCode, string(body))
		}
	}
}

// Code generated by goa v3.1.1, DO NOT EDIT.
//
// server HTTP client CLI support package
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	usersmicroservicec "github.com/LensPlatform/cube_users/gen/http/users_microservice/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `users-microservice (signin|create-user|create-profile|create-user-subscription|get-user)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` users-microservice signin --body '{
      "email": "userame@gmail.com"
   }' --username "username" --password "password"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		usersMicroserviceFlags = flag.NewFlagSet("users-microservice", flag.ContinueOnError)

		usersMicroserviceSigninFlags        = flag.NewFlagSet("signin", flag.ExitOnError)
		usersMicroserviceSigninBodyFlag     = usersMicroserviceSigninFlags.String("body", "REQUIRED", "")
		usersMicroserviceSigninUsernameFlag = usersMicroserviceSigninFlags.String("username", "REQUIRED", "Username used to perform signin")
		usersMicroserviceSigninPasswordFlag = usersMicroserviceSigninFlags.String("password", "REQUIRED", "Password used to perform signin")

		usersMicroserviceCreateUserFlags    = flag.NewFlagSet("create-user", flag.ExitOnError)
		usersMicroserviceCreateUserBodyFlag = usersMicroserviceCreateUserFlags.String("body", "REQUIRED", "")

		usersMicroserviceCreateProfileFlags    = flag.NewFlagSet("create-profile", flag.ExitOnError)
		usersMicroserviceCreateProfileBodyFlag = usersMicroserviceCreateProfileFlags.String("body", "REQUIRED", "")

		usersMicroserviceCreateUserSubscriptionFlags    = flag.NewFlagSet("create-user-subscription", flag.ExitOnError)
		usersMicroserviceCreateUserSubscriptionBodyFlag = usersMicroserviceCreateUserSubscriptionFlags.String("body", "REQUIRED", "")

		usersMicroserviceGetUserFlags      = flag.NewFlagSet("get-user", flag.ExitOnError)
		usersMicroserviceGetUserUserIDFlag = usersMicroserviceGetUserFlags.String("user-id", "REQUIRED", "User id")
	)
	usersMicroserviceFlags.Usage = usersMicroserviceUsage
	usersMicroserviceSigninFlags.Usage = usersMicroserviceSigninUsage
	usersMicroserviceCreateUserFlags.Usage = usersMicroserviceCreateUserUsage
	usersMicroserviceCreateProfileFlags.Usage = usersMicroserviceCreateProfileUsage
	usersMicroserviceCreateUserSubscriptionFlags.Usage = usersMicroserviceCreateUserSubscriptionUsage
	usersMicroserviceGetUserFlags.Usage = usersMicroserviceGetUserUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "users-microservice":
			svcf = usersMicroserviceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "users-microservice":
			switch epn {
			case "signin":
				epf = usersMicroserviceSigninFlags

			case "create-user":
				epf = usersMicroserviceCreateUserFlags

			case "create-profile":
				epf = usersMicroserviceCreateProfileFlags

			case "create-user-subscription":
				epf = usersMicroserviceCreateUserSubscriptionFlags

			case "get-user":
				epf = usersMicroserviceGetUserFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "users-microservice":
			c := usersmicroservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signin":
				endpoint = c.Signin()
				data, err = usersmicroservicec.BuildSigninPayload(*usersMicroserviceSigninBodyFlag, *usersMicroserviceSigninUsernameFlag, *usersMicroserviceSigninPasswordFlag)
			case "create-user":
				endpoint = c.CreateUser()
				data, err = usersmicroservicec.BuildCreateUserPayload(*usersMicroserviceCreateUserBodyFlag)
			case "create-profile":
				endpoint = c.CreateProfile()
				data, err = usersmicroservicec.BuildCreateProfilePayload(*usersMicroserviceCreateProfileBodyFlag)
			case "create-user-subscription":
				endpoint = c.CreateUserSubscription()
				data, err = usersmicroservicec.BuildCreateUserSubscriptionPayload(*usersMicroserviceCreateUserSubscriptionBodyFlag)
			case "get-user":
				endpoint = c.GetUser()
				data, err = usersmicroservicec.BuildGetUserPayload(*usersMicroserviceGetUserUserIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// users-microserviceUsage displays the usage of the users-microservice command
// and its subcommands.
func usersMicroserviceUsage() {
	fmt.Fprintf(os.Stderr, `The users microservice exposes endpoStrings useful in accessing various schema types
Usage:
    %s [globalflags] users-microservice COMMAND [flags]

COMMAND:
    signin: Creates a valid JWT
    create-user: CreateUser implements CreateUser.
    create-profile: CreateProfile implements CreateProfile.
    create-user-subscription: CreateUserSubscription implements CreateUserSubscription.
    get-user: GetUser implements GetUser.

Additional help:
    %s users-microservice COMMAND --help
`, os.Args[0], os.Args[0])
}
func usersMicroserviceSigninUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice signin -body JSON -username STRING -password STRING

Creates a valid JWT
    -body JSON: 
    -username STRING: Username used to perform signin
    -password STRING: Password used to perform signin

Example:
    `+os.Args[0]+` users-microservice signin --body '{
      "email": "userame@gmail.com"
   }' --username "username" --password "password"
`, os.Args[0])
}

func usersMicroserviceCreateUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice create-user -body JSON

CreateUser implements CreateUser.
    -body JSON: 

Example:
    `+os.Args[0]+` users-microservice create-user --body '{
      "user": {
         "body": "Nemo eum rerum."
      }
   }'
`, os.Args[0])
}

func usersMicroserviceCreateProfileUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice create-profile -body JSON

CreateProfile implements CreateProfile.
    -body JSON: 

Example:
    `+os.Args[0]+` users-microservice create-profile --body '{
      "profile": {
         "body": "Et fugit modi error."
      },
      "user_id": 5975922730373798934
   }'
`, os.Args[0])
}

func usersMicroserviceCreateUserSubscriptionUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice create-user-subscription -body JSON

CreateUserSubscription implements CreateUserSubscription.
    -body JSON: 

Example:
    `+os.Args[0]+` users-microservice create-user-subscription --body '{
      "subscription": {
         "body": "Ut libero vero veniam voluptate eos."
      },
      "user_id": 3337468547924670136
   }'
`, os.Args[0])
}

func usersMicroserviceGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice get-user -user-id INT64

GetUser implements GetUser.
    -user-id INT64: User id

Example:
    `+os.Args[0]+` users-microservice get-user --user-id 210086296385265466
`, os.Args[0])
}

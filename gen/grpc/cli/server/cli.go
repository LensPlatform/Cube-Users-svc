// Code generated by goa v3.1.1, DO NOT EDIT.
//
// server gRPC client CLI support package
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package cli

import (
	"flag"
	"fmt"
	"os"

	usersmicroservicec "github.com/LensPlatform/cube_users/gen/grpc/users_microservice/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `users-microservice (signin|create-user|create-profile|create-user-subscription|get-user)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` users-microservice signin --message '{
      "email": "userame@gmail.com"
   }' --username "username" --password "password"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		usersMicroserviceFlags = flag.NewFlagSet("users-microservice", flag.ContinueOnError)

		usersMicroserviceSigninFlags        = flag.NewFlagSet("signin", flag.ExitOnError)
		usersMicroserviceSigninMessageFlag  = usersMicroserviceSigninFlags.String("message", "", "")
		usersMicroserviceSigninUsernameFlag = usersMicroserviceSigninFlags.String("username", "REQUIRED", "")
		usersMicroserviceSigninPasswordFlag = usersMicroserviceSigninFlags.String("password", "REQUIRED", "")

		usersMicroserviceCreateUserFlags       = flag.NewFlagSet("create-user", flag.ExitOnError)
		usersMicroserviceCreateUserMessageFlag = usersMicroserviceCreateUserFlags.String("message", "", "")

		usersMicroserviceCreateProfileFlags       = flag.NewFlagSet("create-profile", flag.ExitOnError)
		usersMicroserviceCreateProfileMessageFlag = usersMicroserviceCreateProfileFlags.String("message", "", "")

		usersMicroserviceCreateUserSubscriptionFlags       = flag.NewFlagSet("create-user-subscription", flag.ExitOnError)
		usersMicroserviceCreateUserSubscriptionMessageFlag = usersMicroserviceCreateUserSubscriptionFlags.String("message", "", "")

		usersMicroserviceGetUserFlags       = flag.NewFlagSet("get-user", flag.ExitOnError)
		usersMicroserviceGetUserMessageFlag = usersMicroserviceGetUserFlags.String("message", "", "")
	)
	usersMicroserviceFlags.Usage = usersMicroserviceUsage
	usersMicroserviceSigninFlags.Usage = usersMicroserviceSigninUsage
	usersMicroserviceCreateUserFlags.Usage = usersMicroserviceCreateUserUsage
	usersMicroserviceCreateProfileFlags.Usage = usersMicroserviceCreateProfileUsage
	usersMicroserviceCreateUserSubscriptionFlags.Usage = usersMicroserviceCreateUserSubscriptionUsage
	usersMicroserviceGetUserFlags.Usage = usersMicroserviceGetUserUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "users-microservice":
			svcf = usersMicroserviceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "users-microservice":
			switch epn {
			case "signin":
				epf = usersMicroserviceSigninFlags

			case "create-user":
				epf = usersMicroserviceCreateUserFlags

			case "create-profile":
				epf = usersMicroserviceCreateProfileFlags

			case "create-user-subscription":
				epf = usersMicroserviceCreateUserSubscriptionFlags

			case "get-user":
				epf = usersMicroserviceGetUserFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "users-microservice":
			c := usersmicroservicec.NewClient(cc, opts...)
			switch epn {
			case "signin":
				endpoint = c.Signin()
				data, err = usersmicroservicec.BuildSigninPayload(*usersMicroserviceSigninMessageFlag, *usersMicroserviceSigninUsernameFlag, *usersMicroserviceSigninPasswordFlag)
			case "create-user":
				endpoint = c.CreateUser()
				data, err = usersmicroservicec.BuildCreateUserPayload(*usersMicroserviceCreateUserMessageFlag)
			case "create-profile":
				endpoint = c.CreateProfile()
				data, err = usersmicroservicec.BuildCreateProfilePayload(*usersMicroserviceCreateProfileMessageFlag)
			case "create-user-subscription":
				endpoint = c.CreateUserSubscription()
				data, err = usersmicroservicec.BuildCreateUserSubscriptionPayload(*usersMicroserviceCreateUserSubscriptionMessageFlag)
			case "get-user":
				endpoint = c.GetUser()
				data, err = usersmicroservicec.BuildGetUserPayload(*usersMicroserviceGetUserMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// users-microserviceUsage displays the usage of the users-microservice command
// and its subcommands.
func usersMicroserviceUsage() {
	fmt.Fprintf(os.Stderr, `The users microservice exposes endpoStrings useful in accessing various schema types
Usage:
    %s [globalflags] users-microservice COMMAND [flags]

COMMAND:
    signin: Creates a valid JWT
    create-user: CreateUser implements CreateUser.
    create-profile: CreateProfile implements CreateProfile.
    create-user-subscription: CreateUserSubscription implements CreateUserSubscription.
    get-user: GetUser implements GetUser.

Additional help:
    %s users-microservice COMMAND --help
`, os.Args[0], os.Args[0])
}
func usersMicroserviceSigninUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice signin -message JSON -username STRING -password STRING

Creates a valid JWT
    -message JSON: 
    -username STRING: 
    -password STRING: 

Example:
    `+os.Args[0]+` users-microservice signin --message '{
      "email": "userame@gmail.com"
   }' --username "username" --password "password"
`, os.Args[0])
}

func usersMicroserviceCreateUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice create-user -message JSON

CreateUser implements CreateUser.
    -message JSON: 

Example:
    `+os.Args[0]+` users-microservice create-user --message '{
      "user": "Adipisci ad."
   }'
`, os.Args[0])
}

func usersMicroserviceCreateProfileUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice create-profile -message JSON

CreateProfile implements CreateProfile.
    -message JSON: 

Example:
    `+os.Args[0]+` users-microservice create-profile --message '{
      "profile": "Repellat officia ut.",
      "user_id": "Quaerat suscipit et consequatur animi."
   }'
`, os.Args[0])
}

func usersMicroserviceCreateUserSubscriptionUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice create-user-subscription -message JSON

CreateUserSubscription implements CreateUserSubscription.
    -message JSON: 

Example:
    `+os.Args[0]+` users-microservice create-user-subscription --message '{
      "subscription": "Voluptas aut dolore quas et animi enim.",
      "user_id": "Sunt odio est assumenda assumenda eligendi."
   }'
`, os.Args[0])
}

func usersMicroserviceGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users-microservice get-user -message JSON

GetUser implements GetUser.
    -message JSON: 

Example:
    `+os.Args[0]+` users-microservice get-user --message '{
      "user_id": "Qui repudiandae ab sint."
   }'
`, os.Args[0])
}

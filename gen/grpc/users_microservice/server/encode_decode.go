// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package server

import (
	"context"

	users_microservicepb "github.com/LensPlatform/cube_users/gen/grpc/users_microservice/pb"
	usersmicroservice "github.com/LensPlatform/cube_users/gen/users_microservice"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
)

// EncodeSigninResponse encodes responses from the "users-microservice" service
// "signin" endpoint.
func EncodeSigninResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*usersmicroservice.Creds)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "signin", "*usersmicroservice.Creds", v)
	}
	resp := NewSigninResponse(result)
	return resp, nil
}

// DecodeSigninRequest decodes requests sent to "users-microservice" service
// "signin" endpoint.
func DecodeSigninRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		username string
		password string
		err      error
	)
	{
		if vals := md.Get("username"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("username", "metadata"))
		} else {
			username = vals[0]
		}
		if vals := md.Get("password"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("password", "metadata"))
		} else {
			password = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *users_microservicepb.SigninRequest
		ok      bool
	)
	{
		if message, ok = v.(*users_microservicepb.SigninRequest); !ok {
			return nil, goagrpc.ErrInvalidType("users-microservice", "signin", "*users_microservicepb.SigninRequest", v)
		}
	}
	var payload *usersmicroservice.SigninPayload
	{
		payload = NewSigninPayload(message, username, password)
	}
	return payload, nil
}

// EncodeCreateUserResponse encodes responses from the "users-microservice"
// service "CreateUser" endpoint.
func EncodeCreateUserResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateUser", "string", v)
	}
	resp := NewCreateUserResponse(result)
	return resp, nil
}

// DecodeCreateUserRequest decodes requests sent to "users-microservice"
// service "CreateUser" endpoint.
func DecodeCreateUserRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *users_microservicepb.CreateUserRequest
		ok      bool
	)
	{
		if message, ok = v.(*users_microservicepb.CreateUserRequest); !ok {
			return nil, goagrpc.ErrInvalidType("users-microservice", "CreateUser", "*users_microservicepb.CreateUserRequest", v)
		}
	}
	var payload *usersmicroservice.CreateUserPayload
	{
		payload = NewCreateUserPayload(message)
	}
	return payload, nil
}

// EncodeCreateProfileResponse encodes responses from the "users-microservice"
// service "CreateProfile" endpoint.
func EncodeCreateProfileResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateProfile", "string", v)
	}
	resp := NewCreateProfileResponse(result)
	return resp, nil
}

// DecodeCreateProfileRequest decodes requests sent to "users-microservice"
// service "CreateProfile" endpoint.
func DecodeCreateProfileRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *users_microservicepb.CreateProfileRequest
		ok      bool
	)
	{
		if message, ok = v.(*users_microservicepb.CreateProfileRequest); !ok {
			return nil, goagrpc.ErrInvalidType("users-microservice", "CreateProfile", "*users_microservicepb.CreateProfileRequest", v)
		}
	}
	var payload *usersmicroservice.CreateProfilePayload
	{
		payload = NewCreateProfilePayload(message)
	}
	return payload, nil
}

// EncodeCreateUserSubscriptionResponse encodes responses from the
// "users-microservice" service "CreateUserSubscription" endpoint.
func EncodeCreateUserSubscriptionResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateUserSubscription", "string", v)
	}
	resp := NewCreateUserSubscriptionResponse(result)
	return resp, nil
}

// DecodeCreateUserSubscriptionRequest decodes requests sent to
// "users-microservice" service "CreateUserSubscription" endpoint.
func DecodeCreateUserSubscriptionRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *users_microservicepb.CreateUserSubscriptionRequest
		ok      bool
	)
	{
		if message, ok = v.(*users_microservicepb.CreateUserSubscriptionRequest); !ok {
			return nil, goagrpc.ErrInvalidType("users-microservice", "CreateUserSubscription", "*users_microservicepb.CreateUserSubscriptionRequest", v)
		}
	}
	var payload *usersmicroservice.CreateUserSubscriptionPayload
	{
		payload = NewCreateUserSubscriptionPayload(message)
	}
	return payload, nil
}

// EncodeGetUserResponse encodes responses from the "users-microservice"
// service "GetUser" endpoint.
func EncodeGetUserResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "GetUser", "string", v)
	}
	resp := NewGetUserResponse(result)
	return resp, nil
}

// DecodeGetUserRequest decodes requests sent to "users-microservice" service
// "GetUser" endpoint.
func DecodeGetUserRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *users_microservicepb.GetUserRequest
		ok      bool
	)
	{
		if message, ok = v.(*users_microservicepb.GetUserRequest); !ok {
			return nil, goagrpc.ErrInvalidType("users-microservice", "GetUser", "*users_microservicepb.GetUserRequest", v)
		}
	}
	var payload *usersmicroservice.GetUserPayload
	{
		payload = NewGetUserPayload(message)
	}
	return payload, nil
}

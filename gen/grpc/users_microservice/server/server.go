// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice gRPC server
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package server

import (
	"context"

	users_microservicepb "github.com/LensPlatform/cube_users/gen/grpc/users_microservice/pb"
	usersmicroservice "github.com/LensPlatform/cube_users/gen/users_microservice"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the users_microservicepb.UsersMicroserviceServer interface.
type Server struct {
	SigninH                 goagrpc.UnaryHandler
	CreateUserH             goagrpc.UnaryHandler
	CreateProfileH          goagrpc.UnaryHandler
	CreateUserSubscriptionH goagrpc.UnaryHandler
	GetUserH                goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the users-microservice service
// endpoints.
func New(e *usersmicroservice.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		SigninH:                 NewSigninHandler(e.Signin, uh),
		CreateUserH:             NewCreateUserHandler(e.CreateUser, uh),
		CreateProfileH:          NewCreateProfileHandler(e.CreateProfile, uh),
		CreateUserSubscriptionH: NewCreateUserSubscriptionHandler(e.CreateUserSubscription, uh),
		GetUserH:                NewGetUserHandler(e.GetUser, uh),
	}
}

// NewSigninHandler creates a gRPC handler which serves the
// "users-microservice" service "signin" endpoint.
func NewSigninHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSigninRequest, EncodeSigninResponse)
	}
	return h
}

// Signin implements the "Signin" method in
// users_microservicepb.UsersMicroserviceServer interface.
func (s *Server) Signin(ctx context.Context, message *users_microservicepb.SigninRequest) (*users_microservicepb.SigninResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "signin")
	ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
	resp, err := s.SigninH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*users_microservicepb.SigninResponse), nil
}

// NewCreateUserHandler creates a gRPC handler which serves the
// "users-microservice" service "CreateUser" endpoint.
func NewCreateUserHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateUserRequest, EncodeCreateUserResponse)
	}
	return h
}

// CreateUser implements the "CreateUser" method in
// users_microservicepb.UsersMicroserviceServer interface.
func (s *Server) CreateUser(ctx context.Context, message *users_microservicepb.CreateUserRequest) (*users_microservicepb.CreateUserResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "CreateUser")
	ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
	resp, err := s.CreateUserH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "timeout":
				return nil, goagrpc.NewStatusError(codes.DeadlineExceeded, err, goagrpc.NewErrorResponse(err))
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*users_microservicepb.CreateUserResponse), nil
}

// NewCreateProfileHandler creates a gRPC handler which serves the
// "users-microservice" service "CreateProfile" endpoint.
func NewCreateProfileHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateProfileRequest, EncodeCreateProfileResponse)
	}
	return h
}

// CreateProfile implements the "CreateProfile" method in
// users_microservicepb.UsersMicroserviceServer interface.
func (s *Server) CreateProfile(ctx context.Context, message *users_microservicepb.CreateProfileRequest) (*users_microservicepb.CreateProfileResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "CreateProfile")
	ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
	resp, err := s.CreateProfileH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "timeout":
				return nil, goagrpc.NewStatusError(codes.DeadlineExceeded, err, goagrpc.NewErrorResponse(err))
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*users_microservicepb.CreateProfileResponse), nil
}

// NewCreateUserSubscriptionHandler creates a gRPC handler which serves the
// "users-microservice" service "CreateUserSubscription" endpoint.
func NewCreateUserSubscriptionHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateUserSubscriptionRequest, EncodeCreateUserSubscriptionResponse)
	}
	return h
}

// CreateUserSubscription implements the "CreateUserSubscription" method in
// users_microservicepb.UsersMicroserviceServer interface.
func (s *Server) CreateUserSubscription(ctx context.Context, message *users_microservicepb.CreateUserSubscriptionRequest) (*users_microservicepb.CreateUserSubscriptionResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "CreateUserSubscription")
	ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
	resp, err := s.CreateUserSubscriptionH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "timeout":
				return nil, goagrpc.NewStatusError(codes.DeadlineExceeded, err, goagrpc.NewErrorResponse(err))
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*users_microservicepb.CreateUserSubscriptionResponse), nil
}

// NewGetUserHandler creates a gRPC handler which serves the
// "users-microservice" service "GetUser" endpoint.
func NewGetUserHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetUserRequest, EncodeGetUserResponse)
	}
	return h
}

// GetUser implements the "GetUser" method in
// users_microservicepb.UsersMicroserviceServer interface.
func (s *Server) GetUser(ctx context.Context, message *users_microservicepb.GetUserRequest) (*users_microservicepb.GetUserResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetUser")
	ctx = context.WithValue(ctx, goa.ServiceKey, "users-microservice")
	resp, err := s.GetUserH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "timeout":
				return nil, goagrpc.NewStatusError(codes.DeadlineExceeded, err, goagrpc.NewErrorResponse(err))
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*users_microservicepb.GetUserResponse), nil
}

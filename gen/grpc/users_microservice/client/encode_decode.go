// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package client

import (
	"context"

	users_microservicepb "github.com/LensPlatform/cube_users/gen/grpc/users_microservice/pb"
	usersmicroservice "github.com/LensPlatform/cube_users/gen/users_microservice"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSigninFunc builds the remote method to invoke for "users-microservice"
// service "signin" endpoint.
func BuildSigninFunc(grpccli users_microservicepb.UsersMicroserviceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Signin(ctx, reqpb.(*users_microservicepb.SigninRequest), opts...)
		}
		return grpccli.Signin(ctx, &users_microservicepb.SigninRequest{}, opts...)
	}
}

// EncodeSigninRequest encodes requests sent to users-microservice signin
// endpoint.
func EncodeSigninRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usersmicroservice.SigninPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "signin", "*usersmicroservice.SigninPayload", v)
	}
	(*md).Append("username", payload.Username)
	(*md).Append("password", payload.Password)
	return NewSigninRequest(payload), nil
}

// DecodeSigninResponse decodes responses from the users-microservice signin
// endpoint.
func DecodeSigninResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*users_microservicepb.SigninResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "signin", "*users_microservicepb.SigninResponse", v)
	}
	res := NewSigninResult(message)
	return res, nil
}

// BuildCreateUserFunc builds the remote method to invoke for
// "users-microservice" service "CreateUser" endpoint.
func BuildCreateUserFunc(grpccli users_microservicepb.UsersMicroserviceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CreateUser(ctx, reqpb.(*users_microservicepb.CreateUserRequest), opts...)
		}
		return grpccli.CreateUser(ctx, &users_microservicepb.CreateUserRequest{}, opts...)
	}
}

// EncodeCreateUserRequest encodes requests sent to users-microservice
// CreateUser endpoint.
func EncodeCreateUserRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usersmicroservice.CreateUserPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateUser", "*usersmicroservice.CreateUserPayload", v)
	}
	return NewCreateUserRequest(payload), nil
}

// DecodeCreateUserResponse decodes responses from the users-microservice
// CreateUser endpoint.
func DecodeCreateUserResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*users_microservicepb.CreateUserResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateUser", "*users_microservicepb.CreateUserResponse", v)
	}
	res := NewCreateUserResult(message)
	return res, nil
}

// BuildCreateProfileFunc builds the remote method to invoke for
// "users-microservice" service "CreateProfile" endpoint.
func BuildCreateProfileFunc(grpccli users_microservicepb.UsersMicroserviceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CreateProfile(ctx, reqpb.(*users_microservicepb.CreateProfileRequest), opts...)
		}
		return grpccli.CreateProfile(ctx, &users_microservicepb.CreateProfileRequest{}, opts...)
	}
}

// EncodeCreateProfileRequest encodes requests sent to users-microservice
// CreateProfile endpoint.
func EncodeCreateProfileRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usersmicroservice.CreateProfilePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateProfile", "*usersmicroservice.CreateProfilePayload", v)
	}
	return NewCreateProfileRequest(payload), nil
}

// DecodeCreateProfileResponse decodes responses from the users-microservice
// CreateProfile endpoint.
func DecodeCreateProfileResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*users_microservicepb.CreateProfileResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateProfile", "*users_microservicepb.CreateProfileResponse", v)
	}
	res := NewCreateProfileResult(message)
	return res, nil
}

// BuildCreateUserSubscriptionFunc builds the remote method to invoke for
// "users-microservice" service "CreateUserSubscription" endpoint.
func BuildCreateUserSubscriptionFunc(grpccli users_microservicepb.UsersMicroserviceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CreateUserSubscription(ctx, reqpb.(*users_microservicepb.CreateUserSubscriptionRequest), opts...)
		}
		return grpccli.CreateUserSubscription(ctx, &users_microservicepb.CreateUserSubscriptionRequest{}, opts...)
	}
}

// EncodeCreateUserSubscriptionRequest encodes requests sent to
// users-microservice CreateUserSubscription endpoint.
func EncodeCreateUserSubscriptionRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usersmicroservice.CreateUserSubscriptionPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateUserSubscription", "*usersmicroservice.CreateUserSubscriptionPayload", v)
	}
	return NewCreateUserSubscriptionRequest(payload), nil
}

// DecodeCreateUserSubscriptionResponse decodes responses from the
// users-microservice CreateUserSubscription endpoint.
func DecodeCreateUserSubscriptionResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*users_microservicepb.CreateUserSubscriptionResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "CreateUserSubscription", "*users_microservicepb.CreateUserSubscriptionResponse", v)
	}
	res := NewCreateUserSubscriptionResult(message)
	return res, nil
}

// BuildGetUserFunc builds the remote method to invoke for "users-microservice"
// service "GetUser" endpoint.
func BuildGetUserFunc(grpccli users_microservicepb.UsersMicroserviceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetUser(ctx, reqpb.(*users_microservicepb.GetUserRequest), opts...)
		}
		return grpccli.GetUser(ctx, &users_microservicepb.GetUserRequest{}, opts...)
	}
}

// EncodeGetUserRequest encodes requests sent to users-microservice GetUser
// endpoint.
func EncodeGetUserRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*usersmicroservice.GetUserPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "GetUser", "*usersmicroservice.GetUserPayload", v)
	}
	return NewGetUserRequest(payload), nil
}

// DecodeGetUserResponse decodes responses from the users-microservice GetUser
// endpoint.
func DecodeGetUserResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*users_microservicepb.GetUserResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users-microservice", "GetUser", "*users_microservicepb.GetUserResponse", v)
	}
	res := NewGetUserResult(message)
	return res, nil
}

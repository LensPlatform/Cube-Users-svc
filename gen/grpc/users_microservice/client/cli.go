// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice gRPC client CLI support package
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package client

import (
	"encoding/json"
	"fmt"

	users_microservicepb "github.com/LensPlatform/cube_users/gen/grpc/users_microservice/pb"
	usersmicroservice "github.com/LensPlatform/cube_users/gen/users_microservice"
)

// BuildSigninPayload builds the payload for the users-microservice signin
// endpoint from CLI flags.
func BuildSigninPayload(usersMicroserviceSigninMessage string, usersMicroserviceSigninUsername string, usersMicroserviceSigninPassword string) (*usersmicroservice.SigninPayload, error) {
	var err error
	var message users_microservicepb.SigninRequest
	{
		if usersMicroserviceSigninMessage != "" {
			err = json.Unmarshal([]byte(usersMicroserviceSigninMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"userame@gmail.com\"\n   }'")
			}
		}
	}
	var username string
	{
		username = usersMicroserviceSigninUsername
	}
	var password string
	{
		password = usersMicroserviceSigninPassword
	}
	v := &usersmicroservice.SigninPayload{}
	if message.Email != "" {
		v.Email = &message.Email
	}
	v.Username = username
	v.Password = password

	return v, nil
}

// BuildCreateUserPayload builds the payload for the users-microservice
// CreateUser endpoint from CLI flags.
func BuildCreateUserPayload(usersMicroserviceCreateUserMessage string) (*usersmicroservice.CreateUserPayload, error) {
	var err error
	var message users_microservicepb.CreateUserRequest
	{
		if usersMicroserviceCreateUserMessage != "" {
			err = json.Unmarshal([]byte(usersMicroserviceCreateUserMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"user\": \"Adipisci ad.\"\n   }'")
			}
		}
	}
	v := &usersmicroservice.CreateUserPayload{
		User: message.User,
	}

	return v, nil
}

// BuildCreateProfilePayload builds the payload for the users-microservice
// CreateProfile endpoint from CLI flags.
func BuildCreateProfilePayload(usersMicroserviceCreateProfileMessage string) (*usersmicroservice.CreateProfilePayload, error) {
	var err error
	var message users_microservicepb.CreateProfileRequest
	{
		if usersMicroserviceCreateProfileMessage != "" {
			err = json.Unmarshal([]byte(usersMicroserviceCreateProfileMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"profile\": \"Repellat officia ut.\",\n      \"user_id\": \"Quaerat suscipit et consequatur animi.\"\n   }'")
			}
		}
	}
	v := &usersmicroservice.CreateProfilePayload{
		Profile: message.Profile,
		UserID:  message.UserId,
	}

	return v, nil
}

// BuildCreateUserSubscriptionPayload builds the payload for the
// users-microservice CreateUserSubscription endpoint from CLI flags.
func BuildCreateUserSubscriptionPayload(usersMicroserviceCreateUserSubscriptionMessage string) (*usersmicroservice.CreateUserSubscriptionPayload, error) {
	var err error
	var message users_microservicepb.CreateUserSubscriptionRequest
	{
		if usersMicroserviceCreateUserSubscriptionMessage != "" {
			err = json.Unmarshal([]byte(usersMicroserviceCreateUserSubscriptionMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"subscription\": \"Voluptas aut dolore quas et animi enim.\",\n      \"user_id\": \"Sunt odio est assumenda assumenda eligendi.\"\n   }'")
			}
		}
	}
	v := &usersmicroservice.CreateUserSubscriptionPayload{
		Subscription: message.Subscription,
		UserID:       message.UserId,
	}

	return v, nil
}

// BuildGetUserPayload builds the payload for the users-microservice GetUser
// endpoint from CLI flags.
func BuildGetUserPayload(usersMicroserviceGetUserMessage string) (*usersmicroservice.GetUserPayload, error) {
	var err error
	var message users_microservicepb.GetUserRequest
	{
		if usersMicroserviceGetUserMessage != "" {
			err = json.Unmarshal([]byte(usersMicroserviceGetUserMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"user_id\": \"Qui repudiandae ab sint.\"\n   }'")
			}
		}
	}
	v := &usersmicroservice.GetUserPayload{
		UserID: message.UserId,
	}

	return v, nil
}

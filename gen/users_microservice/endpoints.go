// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice endpoints
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package usersmicroservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "users-microservice" service endpoints.
type Endpoints struct {
	Signin                 goa.Endpoint
	CreateUser             goa.Endpoint
	CreateProfile          goa.Endpoint
	CreateUserSubscription goa.Endpoint
	GetUser                goa.Endpoint
}

// NewEndpoints wraps the methods of the "users-microservice" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Signin:                 NewSigninEndpoint(s, a.BasicAuth),
		CreateUser:             NewCreateUserEndpoint(s),
		CreateProfile:          NewCreateProfileEndpoint(s),
		CreateUserSubscription: NewCreateUserSubscriptionEndpoint(s),
		GetUser:                NewGetUserEndpoint(s),
	}
}

// Use applies the given middleware to all the "users-microservice" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Signin = m(e.Signin)
	e.CreateUser = m(e.CreateUser)
	e.CreateProfile = m(e.CreateProfile)
	e.CreateUserSubscription = m(e.CreateUserSubscription)
	e.GetUser = m(e.GetUser)
}

// NewSigninEndpoint returns an endpoint function that calls the method
// "signin" of service "users-microservice".
func NewSigninEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SigninPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.Signin(ctx, p)
	}
}

// NewCreateUserEndpoint returns an endpoint function that calls the method
// "CreateUser" of service "users-microservice".
func NewCreateUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateUserPayload)
		return s.CreateUser(ctx, p)
	}
}

// NewCreateProfileEndpoint returns an endpoint function that calls the method
// "CreateProfile" of service "users-microservice".
func NewCreateProfileEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateProfilePayload)
		return s.CreateProfile(ctx, p)
	}
}

// NewCreateUserSubscriptionEndpoint returns an endpoint function that calls
// the method "CreateUserSubscription" of service "users-microservice".
func NewCreateUserSubscriptionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateUserSubscriptionPayload)
		return s.CreateUserSubscription(ctx, p)
	}
}

// NewGetUserEndpoint returns an endpoint function that calls the method
// "GetUser" of service "users-microservice".
func NewGetUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserPayload)
		return s.GetUser(ctx, p)
	}
}

// Code generated by goa v3.1.1, DO NOT EDIT.
//
// users-microservice client
//
// Command:
// $ goa gen github.com/LensPlatform/cube_users/design

package usersmicroservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "users-microservice" service client.
type Client struct {
	SigninEndpoint                 goa.Endpoint
	CreateUserEndpoint             goa.Endpoint
	CreateProfileEndpoint          goa.Endpoint
	CreateUserSubscriptionEndpoint goa.Endpoint
	GetUserEndpoint                goa.Endpoint
}

// NewClient initializes a "users-microservice" service client given the
// endpoints.
func NewClient(signin, createUser, createProfile, createUserSubscription, getUser goa.Endpoint) *Client {
	return &Client{
		SigninEndpoint:                 signin,
		CreateUserEndpoint:             createUser,
		CreateProfileEndpoint:          createProfile,
		CreateUserSubscriptionEndpoint: createUserSubscription,
		GetUserEndpoint:                getUser,
	}
}

// Signin calls the "signin" endpoint of the "users-microservice" service.
func (c *Client) Signin(ctx context.Context, p *SigninPayload) (res *Creds, err error) {
	var ires interface{}
	ires, err = c.SigninEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Creds), nil
}

// CreateUser calls the "CreateUser" endpoint of the "users-microservice"
// service.
func (c *Client) CreateUser(ctx context.Context, p *CreateUserPayload) (res int, err error) {
	var ires interface{}
	ires, err = c.CreateUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(int), nil
}

// CreateProfile calls the "CreateProfile" endpoint of the "users-microservice"
// service.
func (c *Client) CreateProfile(ctx context.Context, p *CreateProfilePayload) (res int, err error) {
	var ires interface{}
	ires, err = c.CreateProfileEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(int), nil
}

// CreateUserSubscription calls the "CreateUserSubscription" endpoint of the
// "users-microservice" service.
func (c *Client) CreateUserSubscription(ctx context.Context, p *CreateUserSubscriptionPayload) (res int, err error) {
	var ires interface{}
	ires, err = c.CreateUserSubscriptionEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(int), nil
}

// GetUser calls the "GetUser" endpoint of the "users-microservice" service.
func (c *Client) GetUser(ctx context.Context, p *GetUserPayload) (res *User, err error) {
	var ires interface{}
	ires, err = c.GetUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*User), nil
}
